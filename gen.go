// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ActivityType.
const (
	Create ActivityType = "create"
	Delete ActivityType = "delete"
	Update ActivityType = "update"
)

// Defines values for ChangesetStatus.
const (
	ChangesetStatusApplied  ChangesetStatus = "applied"
	ChangesetStatusApplying ChangesetStatus = "applying"
	ChangesetStatusCurrent  ChangesetStatus = "current"
	ChangesetStatusFailed   ChangesetStatus = "failed"
	ChangesetStatusPending  ChangesetStatus = "pending"
	ChangesetStatusRejected ChangesetStatus = "rejected"
)

// Defines values for ClusterHealthCheckStatus.
const (
	Error   ClusterHealthCheckStatus = "error"
	Success ClusterHealthCheckStatus = "success"
	Warning ClusterHealthCheckStatus = "warning"
)

// Defines values for CodecClientType.
const (
	Http1 CodecClientType = "http1"
	Http2 CodecClientType = "http2"
)

// Defines values for CreateBillingPortalSessionRequestDeepLink.
const (
	Empty         CreateBillingPortalSessionRequestDeepLink = ""
	PaymentMethod CreateBillingPortalSessionRequestDeepLink = "payment_method"
)

// Defines values for DNSLookupFamily.
const (
	ALL         DNSLookupFamily = "ALL"
	AUTO        DNSLookupFamily = "AUTO"
	V4ONLY      DNSLookupFamily = "V4_ONLY"
	V4PREFERRED DNSLookupFamily = "V4_PREFERRED"
	V6ONLY      DNSLookupFamily = "V6_ONLY"
)

// Defines values for DefaultTemplateRecordType.
const (
	DefaultTemplateRecordTypePolicy   DefaultTemplateRecordType = "policy"
	DefaultTemplateRecordTypeRoute    DefaultTemplateRecordType = "route"
	DefaultTemplateRecordTypeSettings DefaultTemplateRecordType = "settings"
)

// Defines values for DistributionMetricId.
const (
	UpstreamRequestTime DistributionMetricId = "upstream_request_time"
)

// Defines values for EntityType.
const (
	EntityTypeChangeset      EntityType = "changeset"
	EntityTypeCustomDomain   EntityType = "custom_domain"
	EntityTypeDomain         EntityType = "domain"
	EntityTypeKeyPair        EntityType = "key_pair"
	EntityTypeNamespace      EntityType = "namespace"
	EntityTypeOrganization   EntityType = "organization"
	EntityTypePolicy         EntityType = "policy"
	EntityTypeRoute          EntityType = "route"
	EntityTypeServiceAccount EntityType = "service_account"
	EntityTypeSettings       EntityType = "settings"
)

// Defines values for IdentityProviderType.
const (
	Apple    IdentityProviderType = "apple"
	Auth0    IdentityProviderType = "auth0"
	Azure    IdentityProviderType = "azure"
	Cognito  IdentityProviderType = "cognito"
	Github   IdentityProviderType = "github"
	Gitlab   IdentityProviderType = "gitlab"
	Google   IdentityProviderType = "google"
	Oidc     IdentityProviderType = "oidc"
	Okta     IdentityProviderType = "okta"
	Onelogin IdentityProviderType = "onelogin"
	Ping     IdentityProviderType = "ping"
)

// Defines values for JSONPatchOperationOp.
const (
	Add     JSONPatchOperationOp = "add"
	Copy    JSONPatchOperationOp = "copy"
	Move    JSONPatchOperationOp = "move"
	Remove  JSONPatchOperationOp = "remove"
	Replace JSONPatchOperationOp = "replace"
	Test    JSONPatchOperationOp = "test"
)

// Defines values for JwtIssuerFormat.
const (
	HostOnly JwtIssuerFormat = "hostOnly"
	Uri      JwtIssuerFormat = "uri"
)

// Defines values for KeyPairOrigin.
const (
	KeyPairOriginSystem KeyPairOrigin = "system"
	KeyPairOriginUser   KeyPairOrigin = "user"
)

// Defines values for KeyPairStatus.
const (
	KeyPairStatusPending KeyPairStatus = "pending"
	KeyPairStatusReady   KeyPairStatus = "ready"
)

// Defines values for NamespaceRole.
const (
	NamespaceRoleAdmin   NamespaceRole = "admin"
	NamespaceRoleManager NamespaceRole = "manager"
	NamespaceRoleViewer  NamespaceRole = "viewer"
)

// Defines values for NamespaceType.
const (
	NamespaceTypeCluster NamespaceType = "cluster"
	NamespaceTypeRegular NamespaceType = "regular"
	NamespaceTypeRoot    NamespaceType = "root"
)

// Defines values for OrganizationRole.
const (
	OrganizationRoleAdmin   OrganizationRole = "admin"
	OrganizationRoleAuditor OrganizationRole = "auditor"
	OrganizationRoleMember  OrganizationRole = "member"
	OrganizationRoleOwner   OrganizationRole = "owner"
)

// Defines values for OrganizationType.
const (
	Personal     OrganizationType = "personal"
	Professional OrganizationType = "professional"
)

// Defines values for Percentile.
const (
	N50 Percentile = 50
	N95 Percentile = 95
	N99 Percentile = 99
)

// Defines values for PingClusterResponseErrorCode.
const (
	ErrClusterPingConnectionError    PingClusterResponseErrorCode = "err_cluster_ping_connection_error"
	ErrClusterPingDnsError           PingClusterResponseErrorCode = "err_cluster_ping_dns_error"
	ErrClusterPingInvalidCert        PingClusterResponseErrorCode = "err_cluster_ping_invalid_cert"
	ErrClusterPingKeyNotFound        PingClusterResponseErrorCode = "err_cluster_ping_key_not_found"
	ErrClusterPingNoIdentity         PingClusterResponseErrorCode = "err_cluster_ping_no_identity"
	ErrClusterPingUnexpectedResponse PingClusterResponseErrorCode = "err_cluster_ping_unexpected_response"
)

// Defines values for RouteGrpcHealthCheckType.
const (
	Grpc RouteGrpcHealthCheckType = "grpc"
)

// Defines values for RouteHttpHealthCheckType.
const (
	Http RouteHttpHealthCheckType = "http"
)

// Defines values for RouteLoadBalancingPolicy.
const (
	LeastRequest RouteLoadBalancingPolicy = "least_request"
	Maglev       RouteLoadBalancingPolicy = "maglev"
	Random       RouteLoadBalancingPolicy = "random"
	RingHash     RouteLoadBalancingPolicy = "ring_hash"
	RoundRobin   RouteLoadBalancingPolicy = "round_robin"
)

// Defines values for RouteTcpHealthCheckType.
const (
	Tcp RouteTcpHealthCheckType = "tcp"
)

// Defines values for SubscriptionStatus.
const (
	Active            SubscriptionStatus = "active"
	Canceled          SubscriptionStatus = "canceled"
	Incomplete        SubscriptionStatus = "incomplete"
	IncompleteExpired SubscriptionStatus = "incomplete_expired"
	NotFound          SubscriptionStatus = "not_found"
	PastDue           SubscriptionStatus = "past_due"
	Paused            SubscriptionStatus = "paused"
	Trialing          SubscriptionStatus = "trialing"
	Unpaid            SubscriptionStatus = "unpaid"
)

// Defines values for TimeSeriesMetricId.
const (
	AuthzDenied      TimeSeriesMetricId = "authz_denied"
	AuthzErr         TimeSeriesMetricId = "authz_err"
	AuthzOk          TimeSeriesMetricId = "authz_ok"
	Dau              TimeSeriesMetricId = "dau"
	Mau              TimeSeriesMetricId = "mau"
	UpstreamRequests TimeSeriesMetricId = "upstream_requests"
	UpstreamRxBytes  TimeSeriesMetricId = "upstream_rx_bytes"
	UpstreamTxBytes  TimeSeriesMetricId = "upstream_tx_bytes"
)

// Defines values for UserType.
const (
	UserTypeApiAccess   UserType = "user_type_api_access"
	UserTypeInteractive UserType = "user_type_interactive"
)

// ActivityLog defines model for ActivityLog.
type ActivityLog struct {
	ActivityType ActivityType `json:"activityType"`
	Applied      struct {
		At          *time.Time `json:"at,omitempty"`
		By          UserInfo   `json:"by"`
		ChangesetId *string    `json:"changesetId,omitempty"`
	} `json:"applied"`
	CreatedAt time.Time `json:"createdAt"`
	Entity    struct {
		Data *map[string]interface{} `json:"data,omitempty"`
		Id   string                  `json:"id"`
		Type EntityType              `json:"type"`
	} `json:"entity"`
	Id        string `json:"id"`
	Namespace struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"namespace"`
	UpdatedAt time.Time `json:"updatedAt"`
	User      UserInfo  `json:"user"`
}

// ActivityLogList defines model for ActivityLogList.
type ActivityLogList = []ActivityLog

// ActivityLogProperties defines model for ActivityLogProperties.
type ActivityLogProperties struct {
	ActivityType ActivityType `json:"activityType"`
	Applied      struct {
		At          *time.Time `json:"at,omitempty"`
		By          UserInfo   `json:"by"`
		ChangesetId *string    `json:"changesetId,omitempty"`
	} `json:"applied"`
	Entity struct {
		Data *map[string]interface{} `json:"data,omitempty"`
		Id   string                  `json:"id"`
		Type EntityType              `json:"type"`
	} `json:"entity"`
	Namespace struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"namespace"`
	User UserInfo `json:"user"`
}

// ActivityType defines model for ActivityType.
type ActivityType string

// ApplyChangesetResponse defines model for ApplyChangesetResponse.
type ApplyChangesetResponse = Changeset

// BillingUsage defines model for BillingUsage.
type BillingUsage struct {
	Admins   int       `json:"admins"`
	Auditors int       `json:"auditors"`
	Members  int       `json:"members"`
	Owners   int       `json:"owners"`
	Time     time.Time `json:"time"`
	Users    int       `json:"users"`
}

// CertificateExtKeyUsage defines model for CertificateExtKeyUsage.
type CertificateExtKeyUsage struct {
	Any                            bool `json:"any"`
	ClientAuth                     bool `json:"clientAuth"`
	CodeSigning                    bool `json:"codeSigning"`
	EmailProtection                bool `json:"emailProtection"`
	IpsecEndSystem                 bool `json:"ipsecEndSystem"`
	IpsecTunnel                    bool `json:"ipsecTunnel"`
	IpsecUser                      bool `json:"ipsecUser"`
	MicrosoftCommercialCodeSigning bool `json:"microsoftCommercialCodeSigning"`
	MicrosoftKernelCodeSigning     bool `json:"microsoftKernelCodeSigning"`
	MicrosoftServerGatedCrypto     bool `json:"microsoftServerGatedCrypto"`
	NetscapeServerGatedCrypto      bool `json:"netscapeServerGatedCrypto"`
	OcspSigning                    bool `json:"ocspSigning"`
	ServerAuth                     bool `json:"serverAuth"`
	TimeStamping                   bool `json:"timeStamping"`
}

// CertificateInfo defines model for CertificateInfo.
type CertificateInfo struct {
	DnsNames                    []string               `json:"dnsNames"`
	EmailAddresses              []string               `json:"emailAddresses"`
	ExcludedDnsDomains          []string               `json:"excludedDnsDomains"`
	ExcludedEmailAddresses      []string               `json:"excludedEmailAddresses"`
	ExcludedIpRanges            []string               `json:"excludedIpRanges"`
	ExcludedUriDomains          []string               `json:"excludedUriDomains"`
	ExtKeyUsage                 CertificateExtKeyUsage `json:"extKeyUsage"`
	IpAddresses                 []string               `json:"ipAddresses"`
	Issuer                      CertificateName        `json:"issuer"`
	KeyUsage                    CertificateKeyUsage    `json:"keyUsage"`
	NotAfter                    time.Time              `json:"notAfter"`
	NotBefore                   time.Time              `json:"notBefore"`
	PermittedDnsDomains         []string               `json:"permittedDnsDomains"`
	PermittedDnsDomainsCritical bool                   `json:"permittedDnsDomainsCritical"`
	PermittedEmailAddresses     []string               `json:"permittedEmailAddresses"`
	PermittedIpRanges           []string               `json:"permittedIpRanges"`
	PermittedUriDomains         []string               `json:"permittedUriDomains"`
	Serial                      string                 `json:"serial"`
	Subject                     CertificateName        `json:"subject"`
	Uris                        []string               `json:"uris"`
	Version                     int                    `json:"version"`
}

// CertificateKeyUsage defines model for CertificateKeyUsage.
type CertificateKeyUsage struct {
	CertSign          bool `json:"certSign"`
	ContentCommitment bool `json:"contentCommitment"`
	CrlSign           bool `json:"crlSign"`
	DataEncipherment  bool `json:"dataEncipherment"`
	DecipherOnly      bool `json:"decipherOnly"`
	DigitalSignature  bool `json:"digitalSignature"`
	EncipherOnly      bool `json:"encipherOnly"`
	KeyAgreement      bool `json:"keyAgreement"`
	KeyEncipherment   bool `json:"keyEncipherment"`
}

// CertificateName defines model for CertificateName.
type CertificateName struct {
	CommonName         string   `json:"commonName"`
	Country            []string `json:"country"`
	Locality           []string `json:"locality"`
	Organization       []string `json:"organization"`
	OrganizationalUnit []string `json:"organizationalUnit"`
	PostalCode         []string `json:"postalCode"`
	Province           []string `json:"province"`
	SerialNumber       string   `json:"serialNumber"`
	StreetAddress      []string `json:"streetAddress"`
}

// Changeset defines model for Changeset.
type Changeset struct {
	CreatedAt      time.Time       `json:"createdAt"`
	FailureMessage *string         `json:"failureMessage,omitempty"`
	Id             string          `json:"id"`
	NamespaceId    string          `json:"namespaceId"`
	Status         ChangesetStatus `json:"status"`
	UpdatedAt      time.Time       `json:"updatedAt"`
}

// ChangesetProperties defines model for ChangesetProperties.
type ChangesetProperties struct {
	FailureMessage *string         `json:"failureMessage,omitempty"`
	NamespaceId    string          `json:"namespaceId"`
	Status         ChangesetStatus `json:"status"`
}

// ChangesetStatus defines model for ChangesetStatus.
type ChangesetStatus string

// CheckIdentityProviderSettingsRequest defines model for CheckIdentityProviderSettingsRequest.
type CheckIdentityProviderSettingsRequest struct {
	ClientId      *string              `json:"clientId,omitempty"`
	ClientSecret  *string              `json:"clientSecret,omitempty"`
	Provider      IdentityProviderType `json:"provider"`
	RequestParams *StringMap           `json:"requestParams,omitempty"`
	Scopes        *StringList          `json:"scopes,omitempty"`
	Url           *string              `json:"url,omitempty"`
}

// CheckIdentityProviderSettingsResponse defines model for CheckIdentityProviderSettingsResponse.
type CheckIdentityProviderSettingsResponse struct {
	Errors  *CheckIdentityProviderSettingsResponseErrors `json:"errors,omitempty"`
	Success bool                                         `json:"success"`
}

// CheckIdentityProviderSettingsResponseErrors defines model for CheckIdentityProviderSettingsResponseErrors.
type CheckIdentityProviderSettingsResponseErrors struct {
	ClientId      *string `json:"clientId,omitempty"`
	ClientSecret  *string `json:"clientSecret,omitempty"`
	Provider      *string `json:"provider,omitempty"`
	RequestParams *string `json:"requestParams,omitempty"`
	Scopes        *string `json:"scopes,omitempty"`
	Url           *string `json:"url,omitempty"`
}

// Cluster defines model for Cluster.
type Cluster struct {
	AutoDetectIpAddress     *string       `json:"autoDetectIpAddress,omitempty"`
	CreatedAt               time.Time     `json:"createdAt"`
	Domain                  string        `json:"domain"`
	Fqdn                    string        `json:"fqdn"`
	HasFailingHealthChecks  bool          `json:"hasFailingHealthChecks"`
	Id                      string        `json:"id"`
	ImportStatus            *ImportStatus `json:"importStatus,omitempty"`
	ManualOverrideIpAddress *IPAddress    `json:"manualOverrideIpAddress,omitempty"`
	MinReplicaVersion       *string       `json:"minReplicaVersion,omitempty"`
	Name                    string        `json:"name"`
	NamespaceId             string        `json:"namespaceId"`
	OnboardingStatus        *string       `json:"onboardingStatus,omitempty"`
	UpdatedAt               time.Time     `json:"updatedAt"`
}

// ClusterComputedProperties defines model for ClusterComputedProperties.
type ClusterComputedProperties struct {
	AutoDetectIpAddress    *string       `json:"autoDetectIpAddress,omitempty"`
	Domain                 string        `json:"domain"`
	Fqdn                   string        `json:"fqdn"`
	HasFailingHealthChecks bool          `json:"hasFailingHealthChecks"`
	ImportStatus           *ImportStatus `json:"importStatus,omitempty"`
	MinReplicaVersion      *string       `json:"minReplicaVersion,omitempty"`
	NamespaceId            string        `json:"namespaceId"`
	OnboardingStatus       *string       `json:"onboardingStatus,omitempty"`
}

// ClusterHealthCheck defines model for ClusterHealthCheck.
type ClusterHealthCheck struct {
	Description string                   `json:"description"`
	HelpUrl     string                   `json:"helpUrl"`
	Hostname    *string                  `json:"hostname,omitempty"`
	Status      ClusterHealthCheckStatus `json:"status"`
	UpdatedAt   time.Time                `json:"updatedAt"`
}

// ClusterHealthCheckStatus defines model for ClusterHealthCheckStatus.
type ClusterHealthCheckStatus string

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {
	ManualOverrideIpAddress *IPAddress `json:"manualOverrideIpAddress,omitempty"`
	Name                    string     `json:"name"`
}

// ClusterReplica defines model for ClusterReplica.
type ClusterReplica struct {
	CreatedAt time.Time `json:"createdAt"`
	Hostname  string    `json:"hostname"`
	Id        string    `json:"id"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// ClusterReplicaProperties defines model for ClusterReplicaProperties.
type ClusterReplicaProperties struct {
	Hostname string `json:"hostname"`
}

// CodecClientType defines model for CodecClientType.
type CodecClientType string

// CompareChangesetsResponse defines model for CompareChangesetsResponse.
type CompareChangesetsResponse struct {
	EndChangeset   Changeset         `json:"endChangeset"`
	Entities       []ActivityLogList `json:"entities"`
	StartChangeset *Changeset        `json:"startChangeset,omitempty"`
}

// CompleteCheckoutSessionRequest defines model for CompleteCheckoutSessionRequest.
type CompleteCheckoutSessionRequest struct {
	CheckoutSessionId string `json:"checkoutSessionId"`
}

// ConfigureOnboardingRequest defines model for ConfigureOnboardingRequest.
type ConfigureOnboardingRequest struct {
	IpAddress *IPAddress `json:"ipAddress,omitempty"`
	Port      *Port      `json:"port,omitempty"`
	System    string     `json:"system"`
	Timezone  string     `json:"timezone"`
}

// ConfigureOnboardingResponse defines model for ConfigureOnboardingResponse.
type ConfigureOnboardingResponse = map[string]interface{}

// CreateApiAccessUserRequest defines model for CreateApiAccessUserRequest.
type CreateApiAccessUserRequest struct {
	// Name Freetext user name
	Name string `json:"name"`

	// Role A high level role that describes the level of access a user has to an organization.
	// - Owner:	Global namespace admin.
	// - Admin:	Global namespace admin.
	// - Auditor:	Global namespace viewer.
	// - Member:	any user who was granted access to the organization
	Role *OrganizationRole `json:"role,omitempty"`
}

// CreateApiAccessUserResponse defines model for CreateApiAccessUserResponse.
type CreateApiAccessUserResponse struct {
	CreatedAt       time.Time           `json:"createdAt"`
	DisplayName     *string             `json:"displayName,omitempty"`
	Email           openapi_types.Email `json:"email"`
	Id              string              `json:"id"`
	NeedsOnboarding bool                `json:"needsOnboarding"`
	PhotoUrl        *string             `json:"photoUrl,omitempty"`

	// RefreshToken API refresh token
	RefreshToken string    `json:"refreshToken"`
	Type         UserType  `json:"type"`
	UpdatedAt    time.Time `json:"updatedAt"`
}

// CreateBillingPortalSessionRequest defines model for CreateBillingPortalSessionRequest.
type CreateBillingPortalSessionRequest struct {
	DeepLink  CreateBillingPortalSessionRequestDeepLink `json:"deepLink"`
	ReturnUrl string                                    `json:"returnUrl"`
}

// CreateBillingPortalSessionRequestDeepLink defines model for CreateBillingPortalSessionRequest.DeepLink.
type CreateBillingPortalSessionRequestDeepLink string

// CreateBillingPortalSessionResponse defines model for CreateBillingPortalSessionResponse.
type CreateBillingPortalSessionResponse struct {
	Url string `json:"url"`
}

// CreateCheckoutSessionRequest defines model for CreateCheckoutSessionRequest.
type CreateCheckoutSessionRequest struct {
	BillingEmail     *string `json:"billingEmail,omitempty"`
	CancelUrl        string  `json:"cancelUrl"`
	OrganizationName *string `json:"organizationName,omitempty"`
	SuccessUrl       string  `json:"successUrl"`
}

// CreateCheckoutSessionResponse defines model for CreateCheckoutSessionResponse.
type CreateCheckoutSessionResponse struct {
	Url string `json:"url"`
}

// CreateClusterRequest defines model for CreateClusterRequest.
type CreateClusterRequest struct {
	Domain                  string     `json:"domain"`
	ManualOverrideIpAddress *IPAddress `json:"manualOverrideIpAddress,omitempty"`
	Name                    string     `json:"name"`
}

// CreateClusterResponse defines model for CreateClusterResponse.
type CreateClusterResponse struct {
	AutoDetectIpAddress     *string       `json:"autoDetectIpAddress,omitempty"`
	CreatedAt               time.Time     `json:"createdAt"`
	Domain                  string        `json:"domain"`
	Fqdn                    string        `json:"fqdn"`
	HasFailingHealthChecks  bool          `json:"hasFailingHealthChecks"`
	Id                      string        `json:"id"`
	ImportStatus            *ImportStatus `json:"importStatus,omitempty"`
	ManualOverrideIpAddress *IPAddress    `json:"manualOverrideIpAddress,omitempty"`
	MinReplicaVersion       *string       `json:"minReplicaVersion,omitempty"`
	Name                    string        `json:"name"`
	NamespaceId             string        `json:"namespaceId"`
	OnboardingStatus        *string       `json:"onboardingStatus,omitempty"`

	// RefreshToken API refresh token
	RefreshToken string    `json:"refreshToken"`
	UpdatedAt    time.Time `json:"updatedAt"`
}

// CreateCustomDomainRequest defines model for CreateCustomDomainRequest.
type CreateCustomDomainRequest = CustomDomainProperties

// CreateCustomDomainResponse defines model for CreateCustomDomainResponse.
type CreateCustomDomainResponse = CustomDomain

// CreateKeyPairRequest defines model for CreateKeyPairRequest.
type CreateKeyPairRequest = KeyPairWithKeyProperties

// CreateKeyPairResponse defines model for CreateKeyPairResponse.
type CreateKeyPairResponse = KeyPairWithCertificateInfo

// CreateOrganizationInviteRequest defines model for CreateOrganizationInviteRequest.
type CreateOrganizationInviteRequest struct {
	Emails []openapi_types.Email `json:"emails"`

	// Role A high level role that describes the level of access a user has to an organization.
	// - Owner:	Global namespace admin.
	// - Admin:	Global namespace admin.
	// - Auditor:	Global namespace viewer.
	// - Member:	any user who was granted access to the organization
	Role OrganizationRole `json:"role"`
}

// CreateOrganizationInviteResponse defines model for CreateOrganizationInviteResponse.
type CreateOrganizationInviteResponse = []OrganizationInvite

// CreateOrganizationRequest defines model for CreateOrganizationRequest.
type CreateOrganizationRequest = OrganizationProperties

// CreateOrganizationResponse defines model for CreateOrganizationResponse.
type CreateOrganizationResponse struct {
	Cluster      CreateClusterResponse `json:"cluster"`
	Namespace    Namespace             `json:"namespace"`
	Organization Organization          `json:"organization"`
}

// CreatePolicyRequest defines model for CreatePolicyRequest.
type CreatePolicyRequest = PolicyProperties

// CreatePolicyResponse defines model for CreatePolicyResponse.
type CreatePolicyResponse = Policy

// CreateRouteRequest defines model for CreateRouteRequest.
type CreateRouteRequest = RouteProperties

// CreateRouteResponse defines model for CreateRouteResponse.
type CreateRouteResponse = Route

// CreateServiceAccountRequest defines model for CreateServiceAccountRequest.
type CreateServiceAccountRequest = ServiceAccountProperties

// CreateServiceAccountResponse defines model for CreateServiceAccountResponse.
type CreateServiceAccountResponse struct {
	CreatedAt   time.Time  `json:"createdAt"`
	Description string     `json:"description"`
	ExpiresAt   *time.Time `json:"expiresAt,omitempty"`
	Id          string     `json:"id"`
	Token       string     `json:"token"`
	UpdatedAt   time.Time  `json:"updatedAt"`
	UserId      string     `json:"userId"`
}

// CustomDomain defines model for CustomDomain.
type CustomDomain struct {
	ClusterId  string     `json:"clusterId"`
	CreatedAt  time.Time  `json:"createdAt"`
	DomainName string     `json:"domainName"`
	ExpiresAt  *time.Time `json:"expiresAt,omitempty"`
	Id         string     `json:"id"`
	KeyPairId  *string    `json:"keyPairId,omitempty"`
	LastError  *string    `json:"lastError,omitempty"`
	UpdatedAt  time.Time  `json:"updatedAt"`
}

// CustomDomainComputedProperties defines model for CustomDomainComputedProperties.
type CustomDomainComputedProperties struct {
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
	KeyPairId *string    `json:"keyPairId,omitempty"`
	LastError *string    `json:"lastError,omitempty"`
}

// CustomDomainProperties defines model for CustomDomainProperties.
type CustomDomainProperties struct {
	ClusterId  string `json:"clusterId"`
	DomainName string `json:"domainName"`
}

// DNSLookupFamily defines model for DNSLookupFamily.
type DNSLookupFamily string

// DefaultTemplate defines model for DefaultTemplate.
type DefaultTemplate struct {
	CreatedAt         time.Time                 `json:"createdAt"`
	DefaultProperties map[string]interface{}    `json:"defaultProperties"`
	Id                string                    `json:"id"`
	Name              string                    `json:"name"`
	RecordType        DefaultTemplateRecordType `json:"recordType"`
	UpdatedAt         time.Time                 `json:"updatedAt"`
}

// DefaultTemplateProperties defines model for DefaultTemplateProperties.
type DefaultTemplateProperties struct {
	DefaultProperties map[string]interface{}    `json:"defaultProperties"`
	Name              string                    `json:"name"`
	RecordType        DefaultTemplateRecordType `json:"recordType"`
}

// DefaultTemplateRecordType defines model for DefaultTemplateRecordType.
type DefaultTemplateRecordType string

// DistributionMetricId The ID of the distribution metric that is associated with the route.
type DistributionMetricId string

// DistributionSum defines model for DistributionSum.
type DistributionSum struct {
	DistributionValue DistributionValue `json:"distributionValue"`
	Labels            StringMap         `json:"labels"`
	Unit              string            `json:"unit"`
}

// DistributionValue defines model for DistributionValue.
type DistributionValue struct {
	BucketCounts         []int     `json:"bucketCounts"`
	Count                int       `json:"count"`
	ExplicitBucketBounds []float64 `json:"explicitBucketBounds"`
	Mean                 float64   `json:"mean"`
}

// Duration defines model for Duration.
type Duration = string

// EntityIdAndName defines model for EntityIdAndName.
type EntityIdAndName struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// EntityType defines model for EntityType.
type EntityType string

// GenerateSubdomainNameResponse defines model for GenerateSubdomainNameResponse.
type GenerateSubdomainNameResponse struct {
	Name string `json:"name"`
}

// GetBillingUsageResponse defines model for GetBillingUsageResponse.
type GetBillingUsageResponse = BillingUsage

// GetClusterHealthResponse defines model for GetClusterHealthResponse.
type GetClusterHealthResponse = []ClusterHealthCheck

// GetClusterResponse defines model for GetClusterResponse.
type GetClusterResponse = Cluster

// GetClusterTokenResponse defines model for GetClusterTokenResponse.
type GetClusterTokenResponse = RefreshTokenProperties

// GetDistributionMetricSumResponse defines model for GetDistributionMetricSumResponse.
type GetDistributionMetricSumResponse = []DistributionSum

// GetDistributionMetricTimeSeriesResponse defines model for GetDistributionMetricTimeSeriesResponse.
type GetDistributionMetricTimeSeriesResponse = []TimeSeries

// GetKeyPairResponse defines model for GetKeyPairResponse.
type GetKeyPairResponse = KeyPairWithCertificateInfo

// GetOrganizationResponse defines model for GetOrganizationResponse.
type GetOrganizationResponse = Organization

// GetPaymentInformationResponse defines model for GetPaymentInformationResponse.
type GetPaymentInformationResponse = PaymentInformation

// GetPolicyResponse defines model for GetPolicyResponse.
type GetPolicyResponse = Policy

// GetRouteResponse defines model for GetRouteResponse.
type GetRouteResponse = Route

// GetServiceAccountResponse defines model for GetServiceAccountResponse.
type GetServiceAccountResponse = ServiceAccount

// GetServiceAccountTokenResponse defines model for GetServiceAccountTokenResponse.
type GetServiceAccountTokenResponse = ServiceAccountToken

// GetSettingsResponse defines model for GetSettingsResponse.
type GetSettingsResponse = Settings

// GetSubscriptionInformationResponse defines model for GetSubscriptionInformationResponse.
type GetSubscriptionInformationResponse = SubscriptionInformation

// GetTimeSeriesResponse defines model for GetTimeSeriesResponse.
type GetTimeSeriesResponse = []TimeSeries

// GetTimeSeriesSumResponse defines model for GetTimeSeriesSumResponse.
type GetTimeSeriesSumResponse = []Sum

// GetTokenRequest defines model for GetTokenRequest.
type GetTokenRequest = RefreshTokenProperties

// GetTokenResponse defines model for GetTokenResponse.
type GetTokenResponse struct {
	ExpiresInSeconds string `json:"expiresInSeconds"`
	IdToken          string `json:"idToken"`
}

// GetVersionResponse defines model for GetVersionResponse.
type GetVersionResponse struct {
	Version string `json:"version"`
}

// Hex defines model for Hex.
type Hex = string

// IPAddress defines model for IPAddress.
type IPAddress = string

// IdentityProviderType defines model for IdentityProviderType.
type IdentityProviderType string

// ImportHints defines model for ImportHints.
type ImportHints struct {
	Argv0               *string `json:"argv0,omitempty"`
	ConfigArg           *string `json:"configArg,omitempty"`
	Hostname            *string `json:"hostname,omitempty"`
	KubernetesNamespace *string `json:"kubernetesNamespace,omitempty"`
	SystemType          *string `json:"systemType,omitempty"`
}

// ImportStatus defines model for ImportStatus.
type ImportStatus struct {
	Error     *string      `json:"error,omitempty"`
	Hints     *ImportHints `json:"hints,omitempty"`
	Messages  []string     `json:"messages"`
	Timestamp time.Time    `json:"timestamp"`
	Warnings  []string     `json:"warnings"`
}

// IntegerRange defines model for IntegerRange.
type IntegerRange struct {
	End   int `json:"end"`
	Start int `json:"start"`
}

// Invoice defines model for Invoice.
type Invoice struct {
	Currency    string    `json:"currency"`
	Date        time.Time `json:"date"`
	DownloadUrl string    `json:"downloadUrl"`
	ProductName string    `json:"productName"`
	Total       int       `json:"total"`
}

// JSONPatch defines model for JSONPatch.
type JSONPatch = []JSONPatchOperation

// JSONPatchOperation defines model for JSONPatchOperation.
type JSONPatchOperation struct {
	From  *string              `json:"from,omitempty"`
	Op    JSONPatchOperationOp `json:"op"`
	Path  string               `json:"path"`
	Value *interface{}         `json:"value,omitempty"`
}

// JSONPatchOperationOp defines model for JSONPatchOperation.Op.
type JSONPatchOperationOp string

// JwtIssuerFormat defines model for JwtIssuerFormat.
type JwtIssuerFormat string

// KeyPair defines model for KeyPair.
type KeyPair struct {
	Certificate *string       `json:"certificate,omitempty"`
	CreatedAt   time.Time     `json:"createdAt"`
	HasKey      bool          `json:"hasKey"`
	Id          string        `json:"id"`
	Name        *string       `json:"name,omitempty"`
	NamespaceId string        `json:"namespaceId"`
	Origin      KeyPairOrigin `json:"origin"`
	Status      KeyPairStatus `json:"status"`
	UpdatedAt   time.Time     `json:"updatedAt"`
}

// KeyPairComputedProperties defines model for KeyPairComputedProperties.
type KeyPairComputedProperties struct {
	HasKey bool          `json:"hasKey"`
	Origin KeyPairOrigin `json:"origin"`
	Status KeyPairStatus `json:"status"`
}

// KeyPairOrigin defines model for KeyPairOrigin.
type KeyPairOrigin string

// KeyPairProperties defines model for KeyPairProperties.
type KeyPairProperties struct {
	Certificate *string `json:"certificate,omitempty"`
	Name        *string `json:"name,omitempty"`
	NamespaceId string  `json:"namespaceId"`
}

// KeyPairStatus defines model for KeyPairStatus.
type KeyPairStatus string

// KeyPairWithCertificateInfo defines model for KeyPairWithCertificateInfo.
type KeyPairWithCertificateInfo struct {
	Certificate     *string            `json:"certificate,omitempty"`
	CertificateInfo *[]CertificateInfo `json:"certificateInfo,omitempty"`
	CreatedAt       time.Time          `json:"createdAt"`
	HasKey          bool               `json:"hasKey"`
	Id              string             `json:"id"`
	Name            *string            `json:"name,omitempty"`
	NamespaceId     string             `json:"namespaceId"`
	Origin          KeyPairOrigin      `json:"origin"`
	Status          KeyPairStatus      `json:"status"`
	UpdatedAt       time.Time          `json:"updatedAt"`
}

// KeyPairWithKeyProperties defines model for KeyPairWithKeyProperties.
type KeyPairWithKeyProperties struct {
	Certificate *string `json:"certificate,omitempty"`
	Key         *string `json:"key,omitempty"`
	Name        *string `json:"name,omitempty"`
	NamespaceId string  `json:"namespaceId"`
}

// ListActivityLogsResponse defines model for ListActivityLogsResponse.
type ListActivityLogsResponse = []ActivityLog

// ListChangesetsResponse defines model for ListChangesetsResponse.
type ListChangesetsResponse = []Changeset

// ListClusterReplicasResponse defines model for ListClusterReplicasResponse.
type ListClusterReplicasResponse = []ClusterReplica

// ListClustersResponse defines model for ListClustersResponse.
type ListClustersResponse = []Cluster

// ListCustomDomainsResponse defines model for ListCustomDomainsResponse.
type ListCustomDomainsResponse = []CustomDomain

// ListDefaultTemplatesResponse defines model for ListDefaultTemplatesResponse.
type ListDefaultTemplatesResponse = []DefaultTemplate

// ListInvoicesResponse defines model for ListInvoicesResponse.
type ListInvoicesResponse = []Invoice

// ListKeyPairsResponse defines model for ListKeyPairsResponse.
type ListKeyPairsResponse = []KeyPairWithCertificateInfo

// ListNamespacesResponse defines model for ListNamespacesResponse.
type ListNamespacesResponse = []NamespaceWithRole

// ListOrganizationInvitesResponse defines model for ListOrganizationInvitesResponse.
type ListOrganizationInvitesResponse = []OrganizationInvite

// ListOrganizationsResponse defines model for ListOrganizationsResponse.
type ListOrganizationsResponse = []Organization

// ListPoliciesResponse defines model for ListPoliciesResponse.
type ListPoliciesResponse = []Policy

// ListRoutesResponse defines model for ListRoutesResponse.
type ListRoutesResponse = []Route

// ListServiceAccountsResponse defines model for ListServiceAccountsResponse.
type ListServiceAccountsResponse = []ServiceAccount

// ListUserInvitationsResponse defines model for ListUserInvitationsResponse.
type ListUserInvitationsResponse = []UserInvitation

// ListUsersInOrganizationResponse defines model for ListUsersInOrganizationResponse.
type ListUsersInOrganizationResponse = []UserWithOrganizationRole

// Namespace defines model for Namespace.
type Namespace struct {
	CreatedAt time.Time     `json:"createdAt"`
	Id        string        `json:"id"`
	Name      string        `json:"name"`
	ParentId  *string       `json:"parentId,omitempty"`
	Type      NamespaceType `json:"type"`
	UpdatedAt time.Time     `json:"updatedAt"`
}

// NamespaceProperties defines model for NamespaceProperties.
type NamespaceProperties struct {
	Name     string  `json:"name"`
	ParentId *string `json:"parentId,omitempty"`
}

// NamespaceRole defines model for NamespaceRole.
type NamespaceRole string

// NamespaceType defines model for NamespaceType.
type NamespaceType string

// NamespaceWithRole defines model for NamespaceWithRole.
type NamespaceWithRole struct {
	CreatedAt time.Time     `json:"createdAt"`
	Id        string        `json:"id"`
	Name      string        `json:"name"`
	ParentId  *string       `json:"parentId,omitempty"`
	Role      NamespaceRole `json:"role"`
	Type      NamespaceType `json:"type"`
	UpdatedAt time.Time     `json:"updatedAt"`
}

// Organization defines model for Organization.
type Organization struct {
	CreatedAt time.Time `json:"createdAt"`
	Id        string    `json:"id"`
	JoinedAt  time.Time `json:"joinedAt"`

	// LogoURL URL to an image that will be used as the organization logo.
	// User may provide a URL to an image hosted on a third party service,
	// or upload an image to the dashboard, which would result in an URL being generated.
	LogoURL          *string          `json:"logoURL,omitempty"`
	Name             string           `json:"name"`
	OrganizationType OrganizationType `json:"organizationType"`
	OwnerUserId      string           `json:"ownerUserId"`
	Quotas           Quotas           `json:"quotas"`
	ReadOnly         bool             `json:"readOnly"`

	// Role A high level role that describes the level of access a user has to an organization.
	// - Owner:	Global namespace admin.
	// - Admin:	Global namespace admin.
	// - Auditor:	Global namespace viewer.
	// - Member:	any user who was granted access to the organization
	Role      OrganizationRole `json:"role"`
	UpdatedAt time.Time        `json:"updatedAt"`
}

// OrganizationComputedProperties defines model for OrganizationComputedProperties.
type OrganizationComputedProperties struct {
	JoinedAt         time.Time        `json:"joinedAt"`
	OrganizationType OrganizationType `json:"organizationType"`
	OwnerUserId      string           `json:"ownerUserId"`
	Quotas           Quotas           `json:"quotas"`
	ReadOnly         bool             `json:"readOnly"`

	// Role A high level role that describes the level of access a user has to an organization.
	// - Owner:	Global namespace admin.
	// - Admin:	Global namespace admin.
	// - Auditor:	Global namespace viewer.
	// - Member:	any user who was granted access to the organization
	Role OrganizationRole `json:"role"`
}

// OrganizationInvite defines model for OrganizationInvite.
type OrganizationInvite struct {
	CreatedAt time.Time           `json:"createdAt"`
	Email     openapi_types.Email `json:"email"`
	Id        string              `json:"id"`

	// Role A high level role that describes the level of access a user has to an organization.
	// - Owner:	Global namespace admin.
	// - Admin:	Global namespace admin.
	// - Auditor:	Global namespace viewer.
	// - Member:	any user who was granted access to the organization
	Role      OrganizationRole `json:"role"`
	UpdatedAt time.Time        `json:"updatedAt"`
}

// OrganizationInviteProperties defines model for OrganizationInviteProperties.
type OrganizationInviteProperties struct {
	Email openapi_types.Email `json:"email"`

	// Role A high level role that describes the level of access a user has to an organization.
	// - Owner:	Global namespace admin.
	// - Admin:	Global namespace admin.
	// - Auditor:	Global namespace viewer.
	// - Member:	any user who was granted access to the organization
	Role OrganizationRole `json:"role"`
}

// OrganizationProperties defines model for OrganizationProperties.
type OrganizationProperties struct {
	// LogoURL URL to an image that will be used as the organization logo.
	// User may provide a URL to an image hosted on a third party service,
	// or upload an image to the dashboard, which would result in an URL being generated.
	LogoURL *string `json:"logoURL,omitempty"`
	Name    string  `json:"name"`
}

// OrganizationRole A high level role that describes the level of access a user has to an organization.
// - Owner:	Global namespace admin.
// - Admin:	Global namespace admin.
// - Auditor:	Global namespace viewer.
// - Member:	any user who was granted access to the organization
type OrganizationRole string

// OrganizationType defines model for OrganizationType.
type OrganizationType string

// PPLCriteria defines model for PPLCriteria.
type PPLCriteria map[string]interface{}

// PPLRule defines model for PPLRule.
type PPLRule struct {
	Allow *PPLRuleBody `json:"allow,omitempty"`
	Deny  *PPLRuleBody `json:"deny,omitempty"`
}

// PPLRuleBody defines model for PPLRuleBody.
type PPLRuleBody struct {
	And *[]PPLCriteria `json:"and,omitempty"`
	Nor *[]PPLCriteria `json:"nor,omitempty"`
	Not *[]PPLCriteria `json:"not,omitempty"`
	Or  *[]PPLCriteria `json:"or,omitempty"`
}

// PatchSettingsResponse defines model for PatchSettingsResponse.
type PatchSettingsResponse = Settings

// PaymentInformation defines model for PaymentInformation.
type PaymentInformation struct {
	BillingEmail *string `json:"billingEmail,omitempty"`
	Card         *struct {
		Brand *string `json:"brand,omitempty"`
		Last4 *string `json:"last4,omitempty"`
	} `json:"card,omitempty"`
	PaymentMethod *string `json:"paymentMethod,omitempty"`
}

// Percentile defines model for Percentile.
type Percentile int

// PingClusterResponse defines model for PingClusterResponse.
type PingClusterResponse struct {
	// ErrorCode error code, if success is false.
	// possible values are:
	// - no_identity: the cluster does not have an identity key yet
	// - dns_error: the cluster's DNS record could not be resolved
	// - connection_error: the cluster could not be reached within the timeout period
	// - invalid_cert: the cluster's certificate is invalid
	// - unexpected_response: the cluster returned an unexpected response
	// - key_not_found: the cluster's expected identity key could not be found
	ErrorCode    *PingClusterResponseErrorCode `json:"errorCode,omitempty"`
	ErrorMessage *string                       `json:"errorMessage,omitempty"`
	Success      bool                          `json:"success"`
}

// PingClusterResponseErrorCode error code, if success is false.
// possible values are:
// - no_identity: the cluster does not have an identity key yet
// - dns_error: the cluster's DNS record could not be resolved
// - connection_error: the cluster could not be reached within the timeout period
// - invalid_cert: the cluster's certificate is invalid
// - unexpected_response: the cluster returned an unexpected response
// - key_not_found: the cluster's expected identity key could not be found
type PingClusterResponseErrorCode string

// Policy defines model for Policy.
type Policy struct {
	CreatedAt      time.Time         `json:"createdAt"`
	Description    string            `json:"description"`
	Enforced       bool              `json:"enforced"`
	EnforcedRoutes []EntityIdAndName `json:"enforcedRoutes"`
	Explanation    string            `json:"explanation"`
	Id             string            `json:"id"`
	Name           EntityName        `json:"name"`
	NamespaceId    string            `json:"namespaceId"`
	Ppl            Policy_Ppl        `json:"ppl"`
	Remediation    string            `json:"remediation"`
	Routes         []EntityIdAndName `json:"routes"`
	UpdatedAt      time.Time         `json:"updatedAt"`
}

// PolicyPpl1 defines model for .
type PolicyPpl1 = []PPLRule

// Policy_Ppl defines model for Policy.Ppl.
type Policy_Ppl struct {
	union json.RawMessage
}

// PolicyComputedProperties defines model for PolicyComputedProperties.
type PolicyComputedProperties struct {
	EnforcedRoutes []EntityIdAndName `json:"enforcedRoutes"`
	Routes         []EntityIdAndName `json:"routes"`
}

// PolicyProperties defines model for PolicyProperties.
type PolicyProperties struct {
	Description string               `json:"description"`
	Enforced    bool                 `json:"enforced"`
	Explanation string               `json:"explanation"`
	Name        EntityName           `json:"name"`
	NamespaceId string               `json:"namespaceId"`
	Ppl         PolicyProperties_Ppl `json:"ppl"`
	Remediation string               `json:"remediation"`
}

// PolicyPropertiesPpl1 defines model for .
type PolicyPropertiesPpl1 = []PPLRule

// PolicyProperties_Ppl defines model for PolicyProperties.Ppl.
type PolicyProperties_Ppl struct {
	union json.RawMessage
}

// Port defines model for Port.
type Port = string

// Quotas defines model for Quotas.
type Quotas struct {
	Administrators  int `json:"administrators"`
	ApiUsers        int `json:"apiUsers"`
	Certificates    int `json:"certificates"`
	Clusters        int `json:"clusters"`
	CustomDomains   int `json:"customDomains"`
	Policies        int `json:"policies"`
	Replicas        int `json:"replicas"`
	Routes          int `json:"routes"`
	ServiceAccounts int `json:"serviceAccounts"`
}

// ReRunHealthChecksRequest defines model for ReRunHealthChecksRequest.
type ReRunHealthChecksRequest = map[string]interface{}

// RefreshTokenProperties defines model for RefreshTokenProperties.
type RefreshTokenProperties struct {
	// RefreshToken API refresh token
	RefreshToken string `json:"refreshToken"`
}

// RenewApiUserRefreshTokenResponse defines model for RenewApiUserRefreshTokenResponse.
type RenewApiUserRefreshTokenResponse = RefreshTokenProperties

// Route defines model for Route.
type Route struct {
	AllowSpdy                                 bool                      `json:"allowSpdy"`
	AllowWebsockets                           bool                      `json:"allowWebsockets"`
	CreatedAt                                 time.Time                 `json:"createdAt"`
	EnableGoogleCloudServerlessAuthentication bool                      `json:"enableGoogleCloudServerlessAuthentication"`
	EnforcedPolicies                          []EntityIdAndName         `json:"enforcedPolicies"`
	EnforcedPolicyIds                         []string                  `json:"enforcedPolicyIds"`
	From                                      string                    `json:"from"`
	HealthCheck                               *RouteHealthCheck         `json:"healthCheck,omitempty"`
	HostPathRegexRewritePattern               *string                   `json:"hostPathRegexRewritePattern,omitempty"`
	HostPathRegexRewriteSubstitution          *string                   `json:"hostPathRegexRewriteSubstitution,omitempty"`
	HostRewrite                               *string                   `json:"hostRewrite,omitempty"`
	HostRewriteHeader                         *string                   `json:"hostRewriteHeader,omitempty"`
	Id                                        string                    `json:"id"`
	IdentityProviderClientId                  *string                   `json:"identityProviderClientId,omitempty"`
	IdentityProviderClientSecret              *string                   `json:"identityProviderClientSecret,omitempty"`
	IdleTimeout                               *Duration                 `json:"idleTimeout,omitempty"`
	JwtIssuerFormat                           *JwtIssuerFormat          `json:"jwtIssuerFormat,omitempty"`
	KubernetesServiceAccountToken             *string                   `json:"kubernetesServiceAccountToken,omitempty"`
	LoadBalancingPolicy                       *RouteLoadBalancingPolicy `json:"loadBalancingPolicy,omitempty"`
	Name                                      EntityName                `json:"name"`
	NamespaceId                               string                    `json:"namespaceId"`
	PassIdentityHeaders                       *bool                     `json:"passIdentityHeaders,omitempty"`
	Path                                      *string                   `json:"path,omitempty"`
	Policies                                  []EntityIdAndName         `json:"policies"`
	PolicyIds                                 []string                  `json:"policyIds"`
	Prefix                                    *string                   `json:"prefix,omitempty"`
	PrefixRewrite                             *string                   `json:"prefixRewrite,omitempty"`
	PreserveHostHeader                        bool                      `json:"preserveHostHeader"`
	Redirect                                  *RouteRedirect            `json:"redirect,omitempty"`
	Regex                                     *string                   `json:"regex,omitempty"`
	RegexPriorityOrder                        *int64                    `json:"regexPriorityOrder,omitempty"`
	RegexRewritePattern                       *string                   `json:"regexRewritePattern,omitempty"`
	RegexRewriteSubstitution                  *string                   `json:"regexRewriteSubstitution,omitempty"`
	RemoveRequestHeaders                      *[]string                 `json:"removeRequestHeaders,omitempty"`
	Response                                  *RouteDirectResponse      `json:"response,omitempty"`
	RewriteResponseHeaders                    *[]RouteRewriteHeader     `json:"rewriteResponseHeaders,omitempty"`
	SetRequestHeaders                         *StringMap                `json:"setRequestHeaders,omitempty"`
	SetResponseHeaders                        *StringMap                `json:"setResponseHeaders,omitempty"`
	ShowErrorDetails                          bool                      `json:"showErrorDetails"`
	Timeout                                   *Duration                 `json:"timeout,omitempty"`
	TlsClientKeyPairId                        *string                   `json:"tlsClientKeyPairId,omitempty"`
	TlsCustomCaKeyPairId                      *string                   `json:"tlsCustomCaKeyPairId,omitempty"`
	TlsDownstreamClientCaKeyPairId            *string                   `json:"tlsDownstreamClientCaKeyPairId,omitempty"`
	TlsDownstreamServerName                   *string                   `json:"tlsDownstreamServerName,omitempty"`
	TlsSkipVerify                             bool                      `json:"tlsSkipVerify"`
	TlsUpstreamAllowRenegotiation             bool                      `json:"tlsUpstreamAllowRenegotiation"`
	TlsUpstreamServerName                     *string                   `json:"tlsUpstreamServerName,omitempty"`
	To                                        *[]string                 `json:"to,omitempty"`
	UpdatedAt                                 time.Time                 `json:"updatedAt"`
}

// RouteCommonHealthCheckProperties defines model for RouteCommonHealthCheckProperties.
type RouteCommonHealthCheckProperties struct {
	HealthyThreshold   int      `json:"healthyThreshold"`
	Interval           Duration `json:"interval"`
	Timeout            Duration `json:"timeout"`
	UnhealthyThreshold int      `json:"unhealthyThreshold"`
}

// RouteComputedProperties defines model for RouteComputedProperties.
type RouteComputedProperties struct {
	EnforcedPolicies  []EntityIdAndName `json:"enforcedPolicies"`
	EnforcedPolicyIds []string          `json:"enforcedPolicyIds"`
	Policies          []EntityIdAndName `json:"policies"`
}

// RouteDirectResponse defines model for RouteDirectResponse.
type RouteDirectResponse struct {
	Body   string `json:"body"`
	Status uint32 `json:"status"`
}

// RouteGrpcHealthCheck defines model for RouteGrpcHealthCheck.
type RouteGrpcHealthCheck struct {
	Authority          *string                  `json:"authority,omitempty"`
	HealthyThreshold   int                      `json:"healthyThreshold"`
	Interval           Duration                 `json:"interval"`
	ServiceName        *string                  `json:"serviceName,omitempty"`
	Timeout            Duration                 `json:"timeout"`
	Type               RouteGrpcHealthCheckType `json:"type"`
	UnhealthyThreshold int                      `json:"unhealthyThreshold"`
}

// RouteGrpcHealthCheckType defines model for RouteGrpcHealthCheck.Type.
type RouteGrpcHealthCheckType string

// RouteHealthCheck defines model for RouteHealthCheck.
type RouteHealthCheck struct {
	union json.RawMessage
}

// RouteHttpHealthCheck defines model for RouteHttpHealthCheck.
type RouteHttpHealthCheck struct {
	CodecClientType    *CodecClientType         `json:"codecClientType,omitempty"`
	ExpectedStatuses   *[]IntegerRange          `json:"expectedStatuses,omitempty"`
	HealthyThreshold   int                      `json:"healthyThreshold"`
	Host               *string                  `json:"host,omitempty"`
	Interval           Duration                 `json:"interval"`
	Path               string                   `json:"path"`
	Timeout            Duration                 `json:"timeout"`
	Type               RouteHttpHealthCheckType `json:"type"`
	UnhealthyThreshold int                      `json:"unhealthyThreshold"`
}

// RouteHttpHealthCheckType defines model for RouteHttpHealthCheck.Type.
type RouteHttpHealthCheckType string

// RouteLoadBalancingPolicy defines model for RouteLoadBalancingPolicy.
type RouteLoadBalancingPolicy string

// RouteProperties defines model for RouteProperties.
type RouteProperties struct {
	AllowSpdy                                 bool                      `json:"allowSpdy"`
	AllowWebsockets                           bool                      `json:"allowWebsockets"`
	EnableGoogleCloudServerlessAuthentication bool                      `json:"enableGoogleCloudServerlessAuthentication"`
	From                                      string                    `json:"from"`
	HealthCheck                               *RouteHealthCheck         `json:"healthCheck,omitempty"`
	HostPathRegexRewritePattern               *string                   `json:"hostPathRegexRewritePattern,omitempty"`
	HostPathRegexRewriteSubstitution          *string                   `json:"hostPathRegexRewriteSubstitution,omitempty"`
	HostRewrite                               *string                   `json:"hostRewrite,omitempty"`
	HostRewriteHeader                         *string                   `json:"hostRewriteHeader,omitempty"`
	IdentityProviderClientId                  *string                   `json:"identityProviderClientId,omitempty"`
	IdentityProviderClientSecret              *string                   `json:"identityProviderClientSecret,omitempty"`
	IdleTimeout                               *Duration                 `json:"idleTimeout,omitempty"`
	JwtIssuerFormat                           *JwtIssuerFormat          `json:"jwtIssuerFormat,omitempty"`
	KubernetesServiceAccountToken             *string                   `json:"kubernetesServiceAccountToken,omitempty"`
	LoadBalancingPolicy                       *RouteLoadBalancingPolicy `json:"loadBalancingPolicy,omitempty"`
	Name                                      EntityName                `json:"name"`
	NamespaceId                               string                    `json:"namespaceId"`
	PassIdentityHeaders                       *bool                     `json:"passIdentityHeaders,omitempty"`
	Path                                      *string                   `json:"path,omitempty"`
	PolicyIds                                 []string                  `json:"policyIds"`
	Prefix                                    *string                   `json:"prefix,omitempty"`
	PrefixRewrite                             *string                   `json:"prefixRewrite,omitempty"`
	PreserveHostHeader                        bool                      `json:"preserveHostHeader"`
	Redirect                                  *RouteRedirect            `json:"redirect,omitempty"`
	Regex                                     *string                   `json:"regex,omitempty"`
	RegexPriorityOrder                        *int64                    `json:"regexPriorityOrder,omitempty"`
	RegexRewritePattern                       *string                   `json:"regexRewritePattern,omitempty"`
	RegexRewriteSubstitution                  *string                   `json:"regexRewriteSubstitution,omitempty"`
	RemoveRequestHeaders                      *[]string                 `json:"removeRequestHeaders,omitempty"`
	Response                                  *RouteDirectResponse      `json:"response,omitempty"`
	RewriteResponseHeaders                    *[]RouteRewriteHeader     `json:"rewriteResponseHeaders,omitempty"`
	SetRequestHeaders                         *StringMap                `json:"setRequestHeaders,omitempty"`
	SetResponseHeaders                        *StringMap                `json:"setResponseHeaders,omitempty"`
	ShowErrorDetails                          bool                      `json:"showErrorDetails"`
	Timeout                                   *Duration                 `json:"timeout,omitempty"`
	TlsClientKeyPairId                        *string                   `json:"tlsClientKeyPairId,omitempty"`
	TlsCustomCaKeyPairId                      *string                   `json:"tlsCustomCaKeyPairId,omitempty"`
	TlsDownstreamClientCaKeyPairId            *string                   `json:"tlsDownstreamClientCaKeyPairId,omitempty"`
	TlsDownstreamServerName                   *string                   `json:"tlsDownstreamServerName,omitempty"`
	TlsSkipVerify                             bool                      `json:"tlsSkipVerify"`
	TlsUpstreamAllowRenegotiation             bool                      `json:"tlsUpstreamAllowRenegotiation"`
	TlsUpstreamServerName                     *string                   `json:"tlsUpstreamServerName,omitempty"`
	To                                        *[]string                 `json:"to,omitempty"`
}

// RouteRedirect defines model for RouteRedirect.
type RouteRedirect struct {
	HostRedirect   *string `json:"hostRedirect,omitempty"`
	HttpsRedirect  *bool   `json:"httpsRedirect,omitempty"`
	PathRedirect   *string `json:"pathRedirect,omitempty"`
	PortRedirect   *uint32 `json:"portRedirect,omitempty"`
	PrefixRewrite  *string `json:"prefixRewrite,omitempty"`
	ResponseCode   *int32  `json:"responseCode,omitempty"`
	SchemeRedirect *string `json:"schemeRedirect,omitempty"`
	StripQuery     *bool   `json:"stripQuery,omitempty"`
}

// RouteRewriteHeader defines model for RouteRewriteHeader.
type RouteRewriteHeader struct {
	Header  string                     `json:"header"`
	Matcher RouteRewriteHeader_Matcher `json:"matcher"`
	Value   string                     `json:"value"`
}

// RouteRewriteHeaderMatcher0 defines model for .
type RouteRewriteHeaderMatcher0 struct {
	Prefix string `json:"prefix"`
}

// RouteRewriteHeader_Matcher defines model for RouteRewriteHeader.Matcher.
type RouteRewriteHeader_Matcher struct {
	union json.RawMessage
}

// RouteTcpHealthCheck defines model for RouteTcpHealthCheck.
type RouteTcpHealthCheck struct {
	HealthyThreshold   int                     `json:"healthyThreshold"`
	Interval           Duration                `json:"interval"`
	Receive            *[]Hex                  `json:"receive,omitempty"`
	Send               *Hex                    `json:"send,omitempty"`
	Timeout            Duration                `json:"timeout"`
	Type               RouteTcpHealthCheckType `json:"type"`
	UnhealthyThreshold int                     `json:"unhealthyThreshold"`
}

// RouteTcpHealthCheckType defines model for RouteTcpHealthCheck.Type.
type RouteTcpHealthCheckType string

// ServiceAccount defines model for ServiceAccount.
type ServiceAccount struct {
	CreatedAt   time.Time  `json:"createdAt"`
	Description string     `json:"description"`
	ExpiresAt   *time.Time `json:"expiresAt,omitempty"`
	Id          string     `json:"id"`
	UpdatedAt   time.Time  `json:"updatedAt"`
	UserId      string     `json:"userId"`
}

// ServiceAccountProperties defines model for ServiceAccountProperties.
type ServiceAccountProperties struct {
	Description string     `json:"description"`
	ExpiresAt   *time.Time `json:"expiresAt,omitempty"`
	UserId      string     `json:"userId"`
}

// ServiceAccountToken defines model for ServiceAccountToken.
type ServiceAccountToken struct {
	Token string `json:"token"`
}

// Settings defines model for Settings.
type Settings struct {
	// AccessLogFields Controls which fields are included in the access logs.
	AccessLogFields *[]string `json:"accessLogFields,omitempty"`

	// Address Specifies the IP Address and Port to serve HTTP requests from. If empty, `:443` is used.
	Address string `json:"address"`

	// AuthenticateServiceUrl Specifies the URL to use for the authenticate service, if not using the Hosted Authenticate Service. (This URL should resolve to your Pomerium deployment.)
	AuthenticateServiceUrl *string `json:"authenticateServiceUrl,omitempty"`

	// AuthorizeLogFields Controls which fields are included in the authorize logs.
	AuthorizeLogFields  *[]string `json:"authorizeLogFields,omitempty"`
	AutoApplyChangesets bool      `json:"autoApplyChangesets"`

	// CertificateAuthorityKeyPairId ID of CA's public and private key pair.
	CertificateAuthorityKeyPairId *string `json:"certificateAuthorityKeyPairId,omitempty"`

	// CookieDomain Sets the scope of session cookies issued by Pomerium. If you specify the domain explicitly, then subdomains would also be included.
	CookieDomain *string  `json:"cookieDomain,omitempty"`
	CookieExpire Duration `json:"cookieExpire"`

	// CookieHttpOnly If true, this setting forbids JavaScript from accessing the cookie.
	CookieHttpOnly bool `json:"cookieHttpOnly"`

	// CookieName Sets the name of the session cookie sent to clients.
	CookieName string `json:"cookieName"`

	// CookieSameSite Sets the SameSite option for cookies, which determines whether or not a cookie is sent with cross-site requests.
	CookieSameSite *string `json:"cookieSameSite,omitempty"`

	// CookieSecret Sets the secret used to encrypt and sign session cookies. If you don't provide a cookie secret, Pomerium will generate one for you.
	CookieSecret *string   `json:"cookieSecret,omitempty"`
	CreatedAt    time.Time `json:"createdAt"`

	// DatabrokerStorageConnection The databroker storage connection string.
	DatabrokerStorageConnection *string         `json:"databrokerStorageConnection,omitempty"`
	DefaultUpstreamTimeout      Duration        `json:"defaultUpstreamTimeout"`
	DnsLookupFamily             DNSLookupFamily `json:"dnsLookupFamily"`

	// DownstreamMtlsCaKeyPairId Key pair ID of the downstream client CA. If set, requires mTLS for incoming requests.
	DownstreamMtlsCaKeyPairId *string `json:"downstreamMtlsCaKeyPairId,omitempty"`

	// GoogleCloudServerlessAuthenticationServiceAccount Specifies the Service Account credentials to support GCP's Authorization Header format.
	GoogleCloudServerlessAuthenticationServiceAccount *string `json:"googleCloudServerlessAuthenticationServiceAccount,omitempty"`

	// HttpRedirectAddr Specifies the IP Address and Port to redirect HTTP to HTTPS traffic on. If unset, no redirect server is started.
	HttpRedirectAddr *string               `json:"httpRedirectAddr,omitempty"`
	Id               string                `json:"id"`
	IdentityProvider *IdentityProviderType `json:"identityProvider,omitempty"`

	// IdentityProviderClientId Identity provider client ID, if not using the Hosted Authenticate Service.
	IdentityProviderClientId *string `json:"identityProviderClientId,omitempty"`

	// IdentityProviderClientSecret Identity provider client secret, if not using the Hosted Authenticate Service.
	IdentityProviderClientSecret  *string     `json:"identityProviderClientSecret,omitempty"`
	IdentityProviderRequestParams *StringMap  `json:"identityProviderRequestParams,omitempty"`
	IdentityProviderScopes        *StringList `json:"identityProviderScopes,omitempty"`

	// IdentityProviderUrl Identity provider URL, if not using the Hosted Authenticate Service. (This is required only for certain identity providers types.)
	IdentityProviderUrl *string    `json:"identityProviderUrl,omitempty"`
	JwtClaimsHeaders    *StringMap `json:"jwtClaimsHeaders,omitempty"`

	// LogLevel Sets the global logging level for Pomerium. Only logs of the desired level and above will be logged.
	LogLevel string `json:"logLevel"`

	// MetricsAddress Exposes a Prometheus endpoint on the specified port.
	MetricsAddress      *string `json:"metricsAddress,omitempty"`
	PassIdentityHeaders bool    `json:"passIdentityHeaders"`

	// ProxyLogLevel Sets the logging level for the Pomerium Proxy service access logs. Only logs of the desired level and above will be logged.
	ProxyLogLevel      *string    `json:"proxyLogLevel,omitempty"`
	SetResponseHeaders *StringMap `json:"setResponseHeaders,omitempty"`

	// SkipXffAppend If true, the incoming X-Forwarded-For HTTP header would not be modified.
	SkipXffAppend bool     `json:"skipXffAppend"`
	TimeoutIdle   Duration `json:"timeoutIdle"`
	TimeoutRead   Duration `json:"timeoutRead"`
	TimeoutWrite  Duration `json:"timeoutWrite"`

	// TracingDatadogAddress The `host:port` address of the Datadog Trace Agent. Defaults to `localhost:8126`.
	TracingDatadogAddress *string `json:"tracingDatadogAddress,omitempty"`

	// TracingJaegerAgentEndpoint The address of the `jaeger-agent` where you send Spans to.
	TracingJaegerAgentEndpoint *string `json:"tracingJaegerAgentEndpoint,omitempty"`

	// TracingJaegerCollectorEndpoint The URL to the Jaeger HTTP Thrift collector.
	TracingJaegerCollectorEndpoint *string `json:"tracingJaegerCollectorEndpoint,omitempty"`

	// TracingProvider The name of the tracing provider (for example, Jaeger or Zipkin).
	TracingProvider *string `json:"tracingProvider,omitempty"`

	// TracingSampleRate Percentage of requests to sample in decimal notation. The default is 0.0001, or .01%.
	TracingSampleRate float32 `json:"tracingSampleRate"`

	// TracingZipkinEndpoint The URL to the Zipkin HTTP endpoint.
	TracingZipkinEndpoint *string   `json:"tracingZipkinEndpoint,omitempty"`
	UpdatedAt             time.Time `json:"updatedAt"`
}

// SettingsProperties defines model for SettingsProperties.
type SettingsProperties struct {
	// AccessLogFields Controls which fields are included in the access logs.
	AccessLogFields *[]string `json:"accessLogFields,omitempty"`

	// Address Specifies the IP Address and Port to serve HTTP requests from. If empty, `:443` is used.
	Address string `json:"address"`

	// AuthenticateServiceUrl Specifies the URL to use for the authenticate service, if not using the Hosted Authenticate Service. (This URL should resolve to your Pomerium deployment.)
	AuthenticateServiceUrl *string `json:"authenticateServiceUrl,omitempty"`

	// AuthorizeLogFields Controls which fields are included in the authorize logs.
	AuthorizeLogFields  *[]string `json:"authorizeLogFields,omitempty"`
	AutoApplyChangesets bool      `json:"autoApplyChangesets"`

	// CertificateAuthorityKeyPairId ID of CA's public and private key pair.
	CertificateAuthorityKeyPairId *string `json:"certificateAuthorityKeyPairId,omitempty"`

	// CookieDomain Sets the scope of session cookies issued by Pomerium. If you specify the domain explicitly, then subdomains would also be included.
	CookieDomain *string  `json:"cookieDomain,omitempty"`
	CookieExpire Duration `json:"cookieExpire"`

	// CookieHttpOnly If true, this setting forbids JavaScript from accessing the cookie.
	CookieHttpOnly bool `json:"cookieHttpOnly"`

	// CookieName Sets the name of the session cookie sent to clients.
	CookieName string `json:"cookieName"`

	// CookieSameSite Sets the SameSite option for cookies, which determines whether or not a cookie is sent with cross-site requests.
	CookieSameSite *string `json:"cookieSameSite,omitempty"`

	// CookieSecret Sets the secret used to encrypt and sign session cookies. If you don't provide a cookie secret, Pomerium will generate one for you.
	CookieSecret *string `json:"cookieSecret,omitempty"`

	// DatabrokerStorageConnection The databroker storage connection string.
	DatabrokerStorageConnection *string         `json:"databrokerStorageConnection,omitempty"`
	DefaultUpstreamTimeout      Duration        `json:"defaultUpstreamTimeout"`
	DnsLookupFamily             DNSLookupFamily `json:"dnsLookupFamily"`

	// DownstreamMtlsCaKeyPairId Key pair ID of the downstream client CA. If set, requires mTLS for incoming requests.
	DownstreamMtlsCaKeyPairId *string `json:"downstreamMtlsCaKeyPairId,omitempty"`

	// GoogleCloudServerlessAuthenticationServiceAccount Specifies the Service Account credentials to support GCP's Authorization Header format.
	GoogleCloudServerlessAuthenticationServiceAccount *string `json:"googleCloudServerlessAuthenticationServiceAccount,omitempty"`

	// HttpRedirectAddr Specifies the IP Address and Port to redirect HTTP to HTTPS traffic on. If unset, no redirect server is started.
	HttpRedirectAddr *string               `json:"httpRedirectAddr,omitempty"`
	IdentityProvider *IdentityProviderType `json:"identityProvider,omitempty"`

	// IdentityProviderClientId Identity provider client ID, if not using the Hosted Authenticate Service.
	IdentityProviderClientId *string `json:"identityProviderClientId,omitempty"`

	// IdentityProviderClientSecret Identity provider client secret, if not using the Hosted Authenticate Service.
	IdentityProviderClientSecret  *string     `json:"identityProviderClientSecret,omitempty"`
	IdentityProviderRequestParams *StringMap  `json:"identityProviderRequestParams,omitempty"`
	IdentityProviderScopes        *StringList `json:"identityProviderScopes,omitempty"`

	// IdentityProviderUrl Identity provider URL, if not using the Hosted Authenticate Service. (This is required only for certain identity providers types.)
	IdentityProviderUrl *string    `json:"identityProviderUrl,omitempty"`
	JwtClaimsHeaders    *StringMap `json:"jwtClaimsHeaders,omitempty"`

	// LogLevel Sets the global logging level for Pomerium. Only logs of the desired level and above will be logged.
	LogLevel string `json:"logLevel"`

	// MetricsAddress Exposes a Prometheus endpoint on the specified port.
	MetricsAddress      *string `json:"metricsAddress,omitempty"`
	PassIdentityHeaders bool    `json:"passIdentityHeaders"`

	// ProxyLogLevel Sets the logging level for the Pomerium Proxy service access logs. Only logs of the desired level and above will be logged.
	ProxyLogLevel      *string    `json:"proxyLogLevel,omitempty"`
	SetResponseHeaders *StringMap `json:"setResponseHeaders,omitempty"`

	// SkipXffAppend If true, the incoming X-Forwarded-For HTTP header would not be modified.
	SkipXffAppend bool     `json:"skipXffAppend"`
	TimeoutIdle   Duration `json:"timeoutIdle"`
	TimeoutRead   Duration `json:"timeoutRead"`
	TimeoutWrite  Duration `json:"timeoutWrite"`

	// TracingDatadogAddress The `host:port` address of the Datadog Trace Agent. Defaults to `localhost:8126`.
	TracingDatadogAddress *string `json:"tracingDatadogAddress,omitempty"`

	// TracingJaegerAgentEndpoint The address of the `jaeger-agent` where you send Spans to.
	TracingJaegerAgentEndpoint *string `json:"tracingJaegerAgentEndpoint,omitempty"`

	// TracingJaegerCollectorEndpoint The URL to the Jaeger HTTP Thrift collector.
	TracingJaegerCollectorEndpoint *string `json:"tracingJaegerCollectorEndpoint,omitempty"`

	// TracingProvider The name of the tracing provider (for example, Jaeger or Zipkin).
	TracingProvider *string `json:"tracingProvider,omitempty"`

	// TracingSampleRate Percentage of requests to sample in decimal notation. The default is 0.0001, or .01%.
	TracingSampleRate float32 `json:"tracingSampleRate"`

	// TracingZipkinEndpoint The URL to the Zipkin HTTP endpoint.
	TracingZipkinEndpoint *string `json:"tracingZipkinEndpoint,omitempty"`
}

// StartOnboardingRequest defines model for StartOnboardingRequest.
type StartOnboardingRequest struct {
	System   string `json:"system"`
	Timezone string `json:"timezone"`
}

// StartOnboardingResponse defines model for StartOnboardingResponse.
type StartOnboardingResponse struct {
	ClusterId      string `json:"clusterId"`
	ClusterToken   string `json:"clusterToken"`
	OrganizationId string `json:"organizationId"`
}

// StringList defines model for StringList.
type StringList = []string

// StringMap defines model for StringMap.
type StringMap map[string]string

// SubscriptionInformation defines model for SubscriptionInformation.
type SubscriptionInformation struct {
	HasCustomerId             bool               `json:"hasCustomerId"`
	NextInvoiceDate           *time.Time         `json:"nextInvoiceDate,omitempty"`
	PricePerSeatPerMonthCents *int               `json:"pricePerSeatPerMonthCents,omitempty"`
	Status                    SubscriptionStatus `json:"status"`
}

// SubscriptionStatus defines model for SubscriptionStatus.
type SubscriptionStatus string

// Sum defines model for Sum.
type Sum struct {
	Labels StringMap `json:"labels"`
	Unit   string    `json:"unit"`
	Value  float64   `json:"value"`
}

// TimeSeries defines model for TimeSeries.
type TimeSeries struct {
	Labels StringMap             `json:"labels"`
	Points []TimeSeriesDataPoint `json:"points"`
	Unit   string                `json:"unit"`
}

// TimeSeriesDataPoint defines model for TimeSeriesDataPoint.
type TimeSeriesDataPoint struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// TimeSeriesMetricId defines model for TimeSeriesMetricId.
type TimeSeriesMetricId string

// UpdateClusterRequest defines model for UpdateClusterRequest.
type UpdateClusterRequest = ClusterProperties

// UpdateClusterResponse defines model for UpdateClusterResponse.
type UpdateClusterResponse = Cluster

// UpdateCustomerInformationRequest defines model for UpdateCustomerInformationRequest.
type UpdateCustomerInformationRequest struct {
	Email string `json:"email"`
}

// UpdateKeyPairRequest defines model for UpdateKeyPairRequest.
type UpdateKeyPairRequest = KeyPairWithKeyProperties

// UpdateKeyPairResponse defines model for UpdateKeyPairResponse.
type UpdateKeyPairResponse = KeyPairWithCertificateInfo

// UpdateOrganizationRequest defines model for UpdateOrganizationRequest.
type UpdateOrganizationRequest struct {
	// LogoURL URL to an image that will be used as the organization logo.
	// User may provide a URL to an image hosted on a third party service,
	// or upload an image to the dashboard, which would result in an URL being generated.
	LogoURL     *string `json:"logoURL,omitempty"`
	Name        string  `json:"name"`
	OwnerUserId *string `json:"ownerUserId,omitempty"`
}

// UpdateOrganizationResponse defines model for UpdateOrganizationResponse.
type UpdateOrganizationResponse = Organization

// UpdatePolicyRequest defines model for UpdatePolicyRequest.
type UpdatePolicyRequest = PolicyProperties

// UpdatePolicyResponse defines model for UpdatePolicyResponse.
type UpdatePolicyResponse = Policy

// UpdateRouteRequest defines model for UpdateRouteRequest.
type UpdateRouteRequest = RouteProperties

// UpdateRouteResponse defines model for UpdateRouteResponse.
type UpdateRouteResponse = Route

// UpdateSettingsRequest defines model for UpdateSettingsRequest.
type UpdateSettingsRequest = SettingsProperties

// UpdateSettingsResponse defines model for UpdateSettingsResponse.
type UpdateSettingsResponse = Settings

// UpdateUserResponse defines model for UpdateUserResponse.
type UpdateUserResponse = User

// User defines model for User.
type User struct {
	CreatedAt       time.Time           `json:"createdAt"`
	DisplayName     *string             `json:"displayName,omitempty"`
	Email           openapi_types.Email `json:"email"`
	Id              string              `json:"id"`
	NeedsOnboarding bool                `json:"needsOnboarding"`
	PhotoUrl        *string             `json:"photoUrl,omitempty"`
	Type            UserType            `json:"type"`
	UpdatedAt       time.Time           `json:"updatedAt"`
}

// UserIdentityInfo defines model for UserIdentityInfo.
type UserIdentityInfo struct {
	DisplayName *string              `json:"displayName,omitempty"`
	Email       *openapi_types.Email `json:"email,omitempty"`
	PhotoUrl    *string              `json:"photoUrl,omitempty"`
}

// UserInfo defines model for UserInfo.
type UserInfo struct {
	DisplayName *string              `json:"displayName,omitempty"`
	Email       *openapi_types.Email `json:"email,omitempty"`
	Id          *string              `json:"id,omitempty"`
	PhotoUrl    *string              `json:"photoUrl,omitempty"`
}

// UserInvitation defines model for UserInvitation.
type UserInvitation struct {
	CreatedAt    time.Time        `json:"createdAt"`
	Id           string           `json:"id"`
	InvitedBy    UserIdentityInfo `json:"invitedBy"`
	Organization Organization     `json:"organization"`

	// OrganizationRole A high level role that describes the level of access a user has to an organization.
	// - Owner:	Global namespace admin.
	// - Admin:	Global namespace admin.
	// - Auditor:	Global namespace viewer.
	// - Member:	any user who was granted access to the organization
	OrganizationRole OrganizationRole `json:"organizationRole"`
	UpdatedAt        time.Time        `json:"updatedAt"`
}

// UserInvitationProperties An invitation to a user to join an organization.
// As seen by the user invited.
type UserInvitationProperties struct {
	InvitedBy    UserIdentityInfo `json:"invitedBy"`
	Organization Organization     `json:"organization"`

	// OrganizationRole A high level role that describes the level of access a user has to an organization.
	// - Owner:	Global namespace admin.
	// - Admin:	Global namespace admin.
	// - Auditor:	Global namespace viewer.
	// - Member:	any user who was granted access to the organization
	OrganizationRole OrganizationRole `json:"organizationRole"`
}

// UserProperties defines model for UserProperties.
type UserProperties struct {
	DisplayName     *string             `json:"displayName,omitempty"`
	Email           openapi_types.Email `json:"email"`
	NeedsOnboarding bool                `json:"needsOnboarding"`
	PhotoUrl        *string             `json:"photoUrl,omitempty"`
	Type            UserType            `json:"type"`
}

// UserType defines model for UserType.
type UserType string

// UserWithOrganizationRole defines model for UserWithOrganizationRole.
type UserWithOrganizationRole struct {
	CreatedAt       time.Time           `json:"createdAt"`
	DisplayName     *string             `json:"displayName,omitempty"`
	Email           openapi_types.Email `json:"email"`
	Id              string              `json:"id"`
	NeedsOnboarding bool                `json:"needsOnboarding"`

	// OrganizationRole A high level role that describes the level of access a user has to an organization.
	// - Owner:	Global namespace admin.
	// - Admin:	Global namespace admin.
	// - Auditor:	Global namespace viewer.
	// - Member:	any user who was granted access to the organization
	OrganizationRole OrganizationRole `json:"organizationRole"`
	PhotoUrl         *string          `json:"photoUrl,omitempty"`
	Type             UserType         `json:"type"`
	UpdatedAt        time.Time        `json:"updatedAt"`
}

// UserWithOrganizationRoleProperties defines model for UserWithOrganizationRoleProperties.
type UserWithOrganizationRoleProperties struct {
	// OrganizationRole A high level role that describes the level of access a user has to an organization.
	// - Owner:	Global namespace admin.
	// - Admin:	Global namespace admin.
	// - Auditor:	Global namespace viewer.
	// - Member:	any user who was granted access to the organization
	OrganizationRole OrganizationRole `json:"organizationRole"`
}

// EntityName defines model for entityName.
type EntityName = string

// ObjectStandardProperties defines model for objectStandardProperties.
type ObjectStandardProperties struct {
	CreatedAt time.Time `json:"createdAt"`
	Id        string    `json:"id"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// PathChangesetId defines model for pathChangesetId.
type PathChangesetId = string

// PathClusterId defines model for pathClusterId.
type PathClusterId = string

// PathCustomDomainId defines model for pathCustomDomainId.
type PathCustomDomainId = string

// PathDistributionMetricId The ID of the distribution metric that is associated with the route.
type PathDistributionMetricId = DistributionMetricId

// PathInvitationId defines model for pathInvitationId.
type PathInvitationId = string

// PathKeyPairId defines model for pathKeyPairId.
type PathKeyPairId = string

// PathOrganizationId defines model for pathOrganizationId.
type PathOrganizationId = string

// PathPolicyId defines model for pathPolicyId.
type PathPolicyId = string

// PathRecordType defines model for pathRecordType.
type PathRecordType = DefaultTemplateRecordType

// PathRouteId defines model for pathRouteId.
type PathRouteId = string

// PathServiceAccountId defines model for pathServiceAccountId.
type PathServiceAccountId = string

// PathTimeSeriesMetricId defines model for pathTimeSeriesMetricId.
type PathTimeSeriesMetricId = TimeSeriesMetricId

// PathUserId defines model for pathUserId.
type PathUserId = string

// QueryClusterId defines model for queryClusterId.
type QueryClusterId = string

// QueryEndTime defines model for queryEndTime.
type QueryEndTime = time.Time

// QueryNamespaceId defines model for queryNamespaceId.
type QueryNamespaceId = string

// QueryOptionalActivityType defines model for queryOptionalActivityType.
type QueryOptionalActivityType = ActivityType

// QueryOptionalChangesetId defines model for queryOptionalChangesetId.
type QueryOptionalChangesetId = string

// QueryOptionalChangesetStatus defines model for queryOptionalChangesetStatus.
type QueryOptionalChangesetStatus = ChangesetStatus

// QueryOptionalClusterId defines model for queryOptionalClusterId.
type QueryOptionalClusterId = string

// QueryOptionalEntityId defines model for queryOptionalEntityId.
type QueryOptionalEntityId = string

// QueryOptionalEntityType defines model for queryOptionalEntityType.
type QueryOptionalEntityType = EntityType

// QueryOptionalFirstId defines model for queryOptionalFirstId.
type QueryOptionalFirstId = string

// QueryOptionalIncludeDescendants defines model for queryOptionalIncludeDescendants.
type QueryOptionalIncludeDescendants = bool

// QueryOptionalLimit defines model for queryOptionalLimit.
type QueryOptionalLimit = int

// QueryOptionalNamespaceId defines model for queryOptionalNamespaceId.
type QueryOptionalNamespaceId = string

// QueryOptionalOffset defines model for queryOptionalOffset.
type QueryOptionalOffset = int

// QueryOptionalPercentile defines model for queryOptionalPercentile.
type QueryOptionalPercentile = Percentile

// QueryOptionalReplicaId defines model for queryOptionalReplicaId.
type QueryOptionalReplicaId = string

// QueryOptionalRouteId defines model for queryOptionalRouteId.
type QueryOptionalRouteId = string

// QueryOptionalSecondId defines model for queryOptionalSecondId.
type QueryOptionalSecondId = string

// QueryOptionalUserId defines model for queryOptionalUserId.
type QueryOptionalUserId = string

// QueryOptionalUserType defines model for queryOptionalUserType.
type QueryOptionalUserType = UserType

// QueryStartTime defines model for queryStartTime.
type QueryStartTime = time.Time

// AuthorizeNotificationsFormdataBody defines parameters for AuthorizeNotifications.
type AuthorizeNotificationsFormdataBody struct {
	ChannelName string `form:"channel_name" json:"channel_name"`
	SocketId    string `form:"socket_id" json:"socket_id"`
}

// ListActivityLogsParams defines parameters for ListActivityLogs.
type ListActivityLogsParams struct {
	// ActivityType Type of activity
	ActivityType *QueryOptionalActivityType `form:"activityType,omitempty" json:"activityType,omitempty"`

	// EntityId ID of entity
	EntityId *QueryOptionalEntityId `form:"entityId,omitempty" json:"entityId,omitempty"`

	// EntityType Type of entity
	EntityType *QueryOptionalEntityType `form:"entityType,omitempty" json:"entityType,omitempty"`

	// ChangesetId id of changeset
	ChangesetId *QueryOptionalChangesetId `form:"changesetId,omitempty" json:"changesetId,omitempty"`

	// NamespaceId ID of namespace
	NamespaceId *QueryOptionalNamespaceId `form:"namespaceId,omitempty" json:"namespaceId,omitempty"`

	// UserId ID of user
	UserId *QueryOptionalUserId `form:"userId,omitempty" json:"userId,omitempty"`

	// Offset offset of the resources
	Offset *QueryOptionalOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit number of resources returned
	Limit *QueryOptionalLimit `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListChangesetsParams defines parameters for ListChangesets.
type ListChangesetsParams struct {
	// ClusterId ID of cluster
	ClusterId *QueryOptionalClusterId `form:"clusterId,omitempty" json:"clusterId,omitempty"`

	// Status status of changeset
	Status *QueryOptionalChangesetStatus `form:"status,omitempty" json:"status,omitempty"`

	// Offset offset of the resources
	Offset *QueryOptionalOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit number of resources returned
	Limit *QueryOptionalLimit `form:"limit,omitempty" json:"limit,omitempty"`
}

// CompareChangesetsParams defines parameters for CompareChangesets.
type CompareChangesetsParams struct {
	// ClusterId ID of cluster
	ClusterId QueryClusterId `form:"clusterId" json:"clusterId"`

	// FirstId id of the first changeset to compare
	FirstId *QueryOptionalFirstId `form:"firstId,omitempty" json:"firstId,omitempty"`

	// SecondId id of the second changeset to compare
	SecondId *QueryOptionalSecondId `form:"secondId,omitempty" json:"secondId,omitempty"`
}

// GetDistributionSumParams defines parameters for GetDistributionSum.
type GetDistributionSumParams struct {
	// StartTime Start time of the time range
	StartTime QueryStartTime `form:"startTime" json:"startTime"`

	// EndTime Start time of the time range
	EndTime QueryEndTime `form:"endTime" json:"endTime"`

	// RouteId ID of route
	RouteId *QueryOptionalRouteId `form:"routeId,omitempty" json:"routeId,omitempty"`

	// ReplicaId ID of replica
	ReplicaId *QueryOptionalReplicaId `form:"replicaId,omitempty" json:"replicaId,omitempty"`
}

// GetDistributionTimeSeriesParams defines parameters for GetDistributionTimeSeries.
type GetDistributionTimeSeriesParams struct {
	// Percentile Percentile of the distribution
	Percentile *QueryOptionalPercentile `form:"percentile,omitempty" json:"percentile,omitempty"`

	// StartTime Start time of the time range
	StartTime QueryStartTime `form:"startTime" json:"startTime"`

	// EndTime Start time of the time range
	EndTime QueryEndTime `form:"endTime" json:"endTime"`

	// RouteId ID of route
	RouteId *QueryOptionalRouteId `form:"routeId,omitempty" json:"routeId,omitempty"`

	// ReplicaId ID of replica
	ReplicaId *QueryOptionalReplicaId `form:"replicaId,omitempty" json:"replicaId,omitempty"`
}

// ListClusterReplicasParams defines parameters for ListClusterReplicas.
type ListClusterReplicasParams struct {
	// StartTime Start time of the time range
	StartTime QueryStartTime `form:"startTime" json:"startTime"`

	// EndTime Start time of the time range
	EndTime QueryEndTime `form:"endTime" json:"endTime"`
}

// GetTimeSeriesParams defines parameters for GetTimeSeries.
type GetTimeSeriesParams struct {
	// StartTime Start time of the time range
	StartTime QueryStartTime `form:"startTime" json:"startTime"`

	// EndTime Start time of the time range
	EndTime QueryEndTime `form:"endTime" json:"endTime"`

	// RouteId ID of route
	RouteId *QueryOptionalRouteId `form:"routeId,omitempty" json:"routeId,omitempty"`

	// ReplicaId ID of replica
	ReplicaId *QueryOptionalReplicaId `form:"replicaId,omitempty" json:"replicaId,omitempty"`
}

// GetTimeSeriesSumParams defines parameters for GetTimeSeriesSum.
type GetTimeSeriesSumParams struct {
	// StartTime Start time of the time range
	StartTime QueryStartTime `form:"startTime" json:"startTime"`

	// EndTime Start time of the time range
	EndTime QueryEndTime `form:"endTime" json:"endTime"`

	// RouteId ID of route
	RouteId *QueryOptionalRouteId `form:"routeId,omitempty" json:"routeId,omitempty"`

	// ReplicaId ID of replica
	ReplicaId *QueryOptionalReplicaId `form:"replicaId,omitempty" json:"replicaId,omitempty"`
}

// ListCustomDomainsParams defines parameters for ListCustomDomains.
type ListCustomDomainsParams struct {
	// ClusterId ID of cluster
	ClusterId QueryClusterId `form:"clusterId" json:"clusterId"`
}

// ListKeyPairsParams defines parameters for ListKeyPairs.
type ListKeyPairsParams struct {
	// NamespaceId ID of namespace
	NamespaceId QueryNamespaceId `form:"namespaceId" json:"namespaceId"`

	// IncludeDescendants include resources from descendant namespaces
	IncludeDescendants *QueryOptionalIncludeDescendants `form:"includeDescendants,omitempty" json:"includeDescendants,omitempty"`
}

// ListPoliciesParams defines parameters for ListPolicies.
type ListPoliciesParams struct {
	// NamespaceId ID of namespace
	NamespaceId QueryNamespaceId `form:"namespaceId" json:"namespaceId"`

	// IncludeDescendants include resources from descendant namespaces
	IncludeDescendants *QueryOptionalIncludeDescendants `form:"includeDescendants,omitempty" json:"includeDescendants,omitempty"`
}

// ListRoutesParams defines parameters for ListRoutes.
type ListRoutesParams struct {
	// NamespaceId ID of namespace
	NamespaceId QueryNamespaceId `form:"namespaceId" json:"namespaceId"`

	// IncludeDescendants include resources from descendant namespaces
	IncludeDescendants *QueryOptionalIncludeDescendants `form:"includeDescendants,omitempty" json:"includeDescendants,omitempty"`
}

// ListUsersInOrganizationParams defines parameters for ListUsersInOrganization.
type ListUsersInOrganizationParams struct {
	// UserType Type of user
	UserType *QueryOptionalUserType `form:"userType,omitempty" json:"userType,omitempty"`
}

// CheckIdentityProviderSettingsJSONRequestBody defines body for CheckIdentityProviderSettings for application/json ContentType.
type CheckIdentityProviderSettingsJSONRequestBody = CheckIdentityProviderSettingsRequest

// AuthorizeNotificationsFormdataRequestBody defines body for AuthorizeNotifications for application/x-www-form-urlencoded ContentType.
type AuthorizeNotificationsFormdataRequestBody AuthorizeNotificationsFormdataBody

// ConfigureOnboardingJSONRequestBody defines body for ConfigureOnboarding for application/json ContentType.
type ConfigureOnboardingJSONRequestBody = ConfigureOnboardingRequest

// StartOnboardingJSONRequestBody defines body for StartOnboarding for application/json ContentType.
type StartOnboardingJSONRequestBody = StartOnboardingRequest

// CreateOrganizationJSONRequestBody defines body for CreateOrganization for application/json ContentType.
type CreateOrganizationJSONRequestBody = CreateOrganizationRequest

// UpdateOrganizationJSONRequestBody defines body for UpdateOrganization for application/json ContentType.
type UpdateOrganizationJSONRequestBody = UpdateOrganizationRequest

// CompleteCheckoutSessionJSONRequestBody defines body for CompleteCheckoutSession for application/json ContentType.
type CompleteCheckoutSessionJSONRequestBody = CompleteCheckoutSessionRequest

// CreateBillingPortalSessionJSONRequestBody defines body for CreateBillingPortalSession for application/json ContentType.
type CreateBillingPortalSessionJSONRequestBody = CreateBillingPortalSessionRequest

// CreateCheckoutSessionJSONRequestBody defines body for CreateCheckoutSession for application/json ContentType.
type CreateCheckoutSessionJSONRequestBody = CreateCheckoutSessionRequest

// UpdateCustomerInformationJSONRequestBody defines body for UpdateCustomerInformation for application/json ContentType.
type UpdateCustomerInformationJSONRequestBody = UpdateCustomerInformationRequest

// CreateClusterJSONRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody = CreateClusterRequest

// UpdateClusterJSONRequestBody defines body for UpdateCluster for application/json ContentType.
type UpdateClusterJSONRequestBody = UpdateClusterRequest

// RunHealthChecksJSONRequestBody defines body for RunHealthChecks for application/json ContentType.
type RunHealthChecksJSONRequestBody = ReRunHealthChecksRequest

// CreateServiceAccountJSONRequestBody defines body for CreateServiceAccount for application/json ContentType.
type CreateServiceAccountJSONRequestBody = CreateServiceAccountRequest

// PatchSettingsJSONRequestBody defines body for PatchSettings for application/json ContentType.
type PatchSettingsJSONRequestBody = JSONPatch

// UpdateSettingsJSONRequestBody defines body for UpdateSettings for application/json ContentType.
type UpdateSettingsJSONRequestBody = UpdateSettingsRequest

// AddCustomDomainJSONRequestBody defines body for AddCustomDomain for application/json ContentType.
type AddCustomDomainJSONRequestBody = CreateCustomDomainRequest

// CreateOrganizationInviteJSONRequestBody defines body for CreateOrganizationInvite for application/json ContentType.
type CreateOrganizationInviteJSONRequestBody = CreateOrganizationInviteRequest

// CreateKeyPairJSONRequestBody defines body for CreateKeyPair for application/json ContentType.
type CreateKeyPairJSONRequestBody = CreateKeyPairRequest

// UpdateKeyPairJSONRequestBody defines body for UpdateKeyPair for application/json ContentType.
type UpdateKeyPairJSONRequestBody = UpdateKeyPairRequest

// CreatePolicyJSONRequestBody defines body for CreatePolicy for application/json ContentType.
type CreatePolicyJSONRequestBody = CreatePolicyRequest

// UpdatePolicyJSONRequestBody defines body for UpdatePolicy for application/json ContentType.
type UpdatePolicyJSONRequestBody = UpdatePolicyRequest

// CreateRouteJSONRequestBody defines body for CreateRoute for application/json ContentType.
type CreateRouteJSONRequestBody = CreateRouteRequest

// UpdateRouteJSONRequestBody defines body for UpdateRoute for application/json ContentType.
type UpdateRouteJSONRequestBody = UpdateRouteRequest

// CreateApiAccessUserJSONRequestBody defines body for CreateApiAccessUser for application/json ContentType.
type CreateApiAccessUserJSONRequestBody = CreateApiAccessUserRequest

// GetIdTokenJSONRequestBody defines body for GetIdToken for application/json ContentType.
type GetIdTokenJSONRequestBody = GetTokenRequest

// AsPPLRule returns the union data inside the Policy_Ppl as a PPLRule
func (t Policy_Ppl) AsPPLRule() (PPLRule, error) {
	var body PPLRule
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPPLRule overwrites any union data inside the Policy_Ppl as the provided PPLRule
func (t *Policy_Ppl) FromPPLRule(v PPLRule) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePPLRule performs a merge with any union data inside the Policy_Ppl, using the provided PPLRule
func (t *Policy_Ppl) MergePPLRule(v PPLRule) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPolicyPpl1 returns the union data inside the Policy_Ppl as a PolicyPpl1
func (t Policy_Ppl) AsPolicyPpl1() (PolicyPpl1, error) {
	var body PolicyPpl1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPolicyPpl1 overwrites any union data inside the Policy_Ppl as the provided PolicyPpl1
func (t *Policy_Ppl) FromPolicyPpl1(v PolicyPpl1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePolicyPpl1 performs a merge with any union data inside the Policy_Ppl, using the provided PolicyPpl1
func (t *Policy_Ppl) MergePolicyPpl1(v PolicyPpl1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Policy_Ppl) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Policy_Ppl) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPPLRule returns the union data inside the PolicyProperties_Ppl as a PPLRule
func (t PolicyProperties_Ppl) AsPPLRule() (PPLRule, error) {
	var body PPLRule
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPPLRule overwrites any union data inside the PolicyProperties_Ppl as the provided PPLRule
func (t *PolicyProperties_Ppl) FromPPLRule(v PPLRule) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePPLRule performs a merge with any union data inside the PolicyProperties_Ppl, using the provided PPLRule
func (t *PolicyProperties_Ppl) MergePPLRule(v PPLRule) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPolicyPropertiesPpl1 returns the union data inside the PolicyProperties_Ppl as a PolicyPropertiesPpl1
func (t PolicyProperties_Ppl) AsPolicyPropertiesPpl1() (PolicyPropertiesPpl1, error) {
	var body PolicyPropertiesPpl1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPolicyPropertiesPpl1 overwrites any union data inside the PolicyProperties_Ppl as the provided PolicyPropertiesPpl1
func (t *PolicyProperties_Ppl) FromPolicyPropertiesPpl1(v PolicyPropertiesPpl1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePolicyPropertiesPpl1 performs a merge with any union data inside the PolicyProperties_Ppl, using the provided PolicyPropertiesPpl1
func (t *PolicyProperties_Ppl) MergePolicyPropertiesPpl1(v PolicyPropertiesPpl1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PolicyProperties_Ppl) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PolicyProperties_Ppl) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRouteHttpHealthCheck returns the union data inside the RouteHealthCheck as a RouteHttpHealthCheck
func (t RouteHealthCheck) AsRouteHttpHealthCheck() (RouteHttpHealthCheck, error) {
	var body RouteHttpHealthCheck
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRouteHttpHealthCheck overwrites any union data inside the RouteHealthCheck as the provided RouteHttpHealthCheck
func (t *RouteHealthCheck) FromRouteHttpHealthCheck(v RouteHttpHealthCheck) error {
	v.Type = "http"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRouteHttpHealthCheck performs a merge with any union data inside the RouteHealthCheck, using the provided RouteHttpHealthCheck
func (t *RouteHealthCheck) MergeRouteHttpHealthCheck(v RouteHttpHealthCheck) error {
	v.Type = "http"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRouteTcpHealthCheck returns the union data inside the RouteHealthCheck as a RouteTcpHealthCheck
func (t RouteHealthCheck) AsRouteTcpHealthCheck() (RouteTcpHealthCheck, error) {
	var body RouteTcpHealthCheck
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRouteTcpHealthCheck overwrites any union data inside the RouteHealthCheck as the provided RouteTcpHealthCheck
func (t *RouteHealthCheck) FromRouteTcpHealthCheck(v RouteTcpHealthCheck) error {
	v.Type = "tcp"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRouteTcpHealthCheck performs a merge with any union data inside the RouteHealthCheck, using the provided RouteTcpHealthCheck
func (t *RouteHealthCheck) MergeRouteTcpHealthCheck(v RouteTcpHealthCheck) error {
	v.Type = "tcp"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRouteGrpcHealthCheck returns the union data inside the RouteHealthCheck as a RouteGrpcHealthCheck
func (t RouteHealthCheck) AsRouteGrpcHealthCheck() (RouteGrpcHealthCheck, error) {
	var body RouteGrpcHealthCheck
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRouteGrpcHealthCheck overwrites any union data inside the RouteHealthCheck as the provided RouteGrpcHealthCheck
func (t *RouteHealthCheck) FromRouteGrpcHealthCheck(v RouteGrpcHealthCheck) error {
	v.Type = "grpc"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRouteGrpcHealthCheck performs a merge with any union data inside the RouteHealthCheck, using the provided RouteGrpcHealthCheck
func (t *RouteHealthCheck) MergeRouteGrpcHealthCheck(v RouteGrpcHealthCheck) error {
	v.Type = "grpc"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RouteHealthCheck) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RouteHealthCheck) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "grpc":
		return t.AsRouteGrpcHealthCheck()
	case "http":
		return t.AsRouteHttpHealthCheck()
	case "tcp":
		return t.AsRouteTcpHealthCheck()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RouteHealthCheck) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RouteHealthCheck) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRouteRewriteHeaderMatcher0 returns the union data inside the RouteRewriteHeader_Matcher as a RouteRewriteHeaderMatcher0
func (t RouteRewriteHeader_Matcher) AsRouteRewriteHeaderMatcher0() (RouteRewriteHeaderMatcher0, error) {
	var body RouteRewriteHeaderMatcher0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRouteRewriteHeaderMatcher0 overwrites any union data inside the RouteRewriteHeader_Matcher as the provided RouteRewriteHeaderMatcher0
func (t *RouteRewriteHeader_Matcher) FromRouteRewriteHeaderMatcher0(v RouteRewriteHeaderMatcher0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRouteRewriteHeaderMatcher0 performs a merge with any union data inside the RouteRewriteHeader_Matcher, using the provided RouteRewriteHeaderMatcher0
func (t *RouteRewriteHeader_Matcher) MergeRouteRewriteHeaderMatcher0(v RouteRewriteHeaderMatcher0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RouteRewriteHeader_Matcher) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RouteRewriteHeader_Matcher) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CheckIdentityProviderSettingsWithBody request with any body
	CheckIdentityProviderSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CheckIdentityProviderSettings(ctx context.Context, body CheckIdentityProviderSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDefaultTemplates request
	ListDefaultTemplates(ctx context.Context, recordType PathRecordType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateSubdomainName request
	GenerateSubdomainName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthorizeNotificationsWithBody request with any body
	AuthorizeNotificationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthorizeNotificationsWithFormdataBody(ctx context.Context, body AuthorizeNotificationsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteOnboarding request
	CompleteOnboarding(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfigureOnboardingWithBody request with any body
	ConfigureOnboardingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConfigureOnboarding(ctx context.Context, body ConfigureOnboardingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartOnboardingWithBody request with any body
	StartOnboardingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StartOnboarding(ctx context.Context, body StartOnboardingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizations request
	ListOrganizations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganizationWithBody request with any body
	CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganization request
	DeleteOrganization(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganization request
	GetOrganization(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganizationWithBody request with any body
	UpdateOrganizationWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganization(ctx context.Context, organizationId PathOrganizationId, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListActivityLogs request
	ListActivityLogs(ctx context.Context, organizationId PathOrganizationId, params *ListActivityLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteCheckoutSessionWithBody request with any body
	CompleteCheckoutSessionWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CompleteCheckoutSession(ctx context.Context, organizationId PathOrganizationId, body CompleteCheckoutSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBillingPortalSessionWithBody request with any body
	CreateBillingPortalSessionWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBillingPortalSession(ctx context.Context, organizationId PathOrganizationId, body CreateBillingPortalSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCheckoutSessionWithBody request with any body
	CreateCheckoutSessionWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCheckoutSession(ctx context.Context, organizationId PathOrganizationId, body CreateCheckoutSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCustomerInformationWithBody request with any body
	UpdateCustomerInformationWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCustomerInformation(ctx context.Context, organizationId PathOrganizationId, body UpdateCustomerInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListInvoices request
	ListInvoices(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaymentInformation request
	GetPaymentInformation(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSubscriptionInformation request
	GetSubscriptionInformation(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBillingUsage request
	GetBillingUsage(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListChangesets request
	ListChangesets(ctx context.Context, organizationId PathOrganizationId, params *ListChangesetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompareChangesets request
	CompareChangesets(ctx context.Context, organizationId PathOrganizationId, params *CompareChangesetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplyChangeset request
	ApplyChangeset(ctx context.Context, organizationId PathOrganizationId, changesetId PathChangesetId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListClusters request
	ListClusters(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateClusterWithBody request with any body
	CreateClusterWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCluster(ctx context.Context, organizationId PathOrganizationId, body CreateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCluster request
	DeleteCluster(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCluster request
	GetCluster(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateClusterWithBody request with any body
	UpdateClusterWithBody(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCluster(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, body UpdateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDistributionSum request
	GetDistributionSum(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, metricId PathDistributionMetricId, params *GetDistributionSumParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDistributionTimeSeries request
	GetDistributionTimeSeries(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, metricId PathDistributionMetricId, params *GetDistributionTimeSeriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterHealth request
	GetClusterHealth(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RunHealthChecksWithBody request with any body
	RunHealthChecksWithBody(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RunHealthChecks(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, body RunHealthChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PingCluster request
	PingCluster(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListClusterReplicas request
	ListClusterReplicas(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, params *ListClusterReplicasParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServiceAccounts request
	ListServiceAccounts(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateServiceAccountWithBody request with any body
	CreateServiceAccountWithBody(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateServiceAccount(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, body CreateServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServiceAccount request
	DeleteServiceAccount(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, serviceAccountId PathServiceAccountId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAccount request
	GetServiceAccount(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, serviceAccountId PathServiceAccountId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAccountToken request
	GetServiceAccountToken(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, serviceAccountId PathServiceAccountId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettings request
	GetSettings(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSettingsWithBody request with any body
	PatchSettingsWithBody(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSettings(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, body PatchSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSettingsWithBody request with any body
	UpdateSettingsWithBody(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSettings(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, body UpdateSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimeSeries request
	GetTimeSeries(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, metricId PathTimeSeriesMetricId, params *GetTimeSeriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimeSeriesSum request
	GetTimeSeriesSum(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, metricId PathTimeSeriesMetricId, params *GetTimeSeriesSumParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RotateClusterToken request
	RotateClusterToken(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCustomDomains request
	ListCustomDomains(ctx context.Context, organizationId PathOrganizationId, params *ListCustomDomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCustomDomainWithBody request with any body
	AddCustomDomainWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddCustomDomain(ctx context.Context, organizationId PathOrganizationId, body AddCustomDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomDomain request
	DeleteCustomDomain(ctx context.Context, organizationId PathOrganizationId, customDomainId PathCustomDomainId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetryCustomDomain request
	RetryCustomDomain(ctx context.Context, organizationId PathOrganizationId, customDomainId PathCustomDomainId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizationInvites request
	ListOrganizationInvites(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganizationInviteWithBody request with any body
	CreateOrganizationInviteWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganizationInvite(ctx context.Context, organizationId PathOrganizationId, body CreateOrganizationInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationInvite request
	DeleteOrganizationInvite(ctx context.Context, organizationId PathOrganizationId, invitationId PathInvitationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListKeyPairs request
	ListKeyPairs(ctx context.Context, organizationId PathOrganizationId, params *ListKeyPairsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateKeyPairWithBody request with any body
	CreateKeyPairWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateKeyPair(ctx context.Context, organizationId PathOrganizationId, body CreateKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteKeyPair request
	DeleteKeyPair(ctx context.Context, organizationId PathOrganizationId, keyPairId PathKeyPairId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeyPair request
	GetKeyPair(ctx context.Context, organizationId PathOrganizationId, keyPairId PathKeyPairId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateKeyPairWithBody request with any body
	UpdateKeyPairWithBody(ctx context.Context, organizationId PathOrganizationId, keyPairId PathKeyPairId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateKeyPair(ctx context.Context, organizationId PathOrganizationId, keyPairId PathKeyPairId, body UpdateKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LeaveOrganization request
	LeaveOrganization(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListNamespaces request
	ListNamespaces(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPolicies request
	ListPolicies(ctx context.Context, organizationId PathOrganizationId, params *ListPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePolicyWithBody request with any body
	CreatePolicyWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePolicy(ctx context.Context, organizationId PathOrganizationId, body CreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePolicy request
	DeletePolicy(ctx context.Context, organizationId PathOrganizationId, policyId PathPolicyId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolicy request
	GetPolicy(ctx context.Context, organizationId PathOrganizationId, policyId PathPolicyId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePolicyWithBody request with any body
	UpdatePolicyWithBody(ctx context.Context, organizationId PathOrganizationId, policyId PathPolicyId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePolicy(ctx context.Context, organizationId PathOrganizationId, policyId PathPolicyId, body UpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRoutes request
	ListRoutes(ctx context.Context, organizationId PathOrganizationId, params *ListRoutesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRouteWithBody request with any body
	CreateRouteWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRoute(ctx context.Context, organizationId PathOrganizationId, body CreateRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRoute request
	DeleteRoute(ctx context.Context, organizationId PathOrganizationId, routeId PathRouteId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRoute request
	GetRoute(ctx context.Context, organizationId PathOrganizationId, routeId PathRouteId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRouteWithBody request with any body
	UpdateRouteWithBody(ctx context.Context, organizationId PathOrganizationId, routeId PathRouteId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRoute(ctx context.Context, organizationId PathOrganizationId, routeId PathRouteId, body UpdateRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRouteCertificates request
	GetRouteCertificates(ctx context.Context, organizationId PathOrganizationId, routeId PathRouteId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsersInOrganization request
	ListUsersInOrganization(ctx context.Context, organizationId PathOrganizationId, params *ListUsersInOrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApiAccessUserWithBody request with any body
	CreateApiAccessUserWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApiAccessUser(ctx context.Context, organizationId PathOrganizationId, body CreateApiAccessUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveUserFromOrganization request
	RemoveUserFromOrganization(ctx context.Context, organizationId PathOrganizationId, userId PathUserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RenewApiUserRefreshToken request
	RenewApiUserRefreshToken(ctx context.Context, organizationId PathOrganizationId, userId PathUserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdTokenWithBody request with any body
	GetIdTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIdToken(ctx context.Context, body GetIdTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCurrentUser request
	DeleteCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCurrentUserInfo request
	UpdateCurrentUserInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUserInvitations request
	ListUserInvitations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcceptInvitation request
	AcceptInvitation(ctx context.Context, invitationId PathInvitationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RejectInvitation request
	RejectInvitation(ctx context.Context, invitationId PathInvitationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CheckIdentityProviderSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckIdentityProviderSettingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckIdentityProviderSettings(ctx context.Context, body CheckIdentityProviderSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckIdentityProviderSettingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDefaultTemplates(ctx context.Context, recordType PathRecordType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDefaultTemplatesRequest(c.Server, recordType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateSubdomainName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateSubdomainNameRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthorizeNotificationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthorizeNotificationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthorizeNotificationsWithFormdataBody(ctx context.Context, body AuthorizeNotificationsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthorizeNotificationsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteOnboarding(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteOnboardingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigureOnboardingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigureOnboardingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigureOnboarding(ctx context.Context, body ConfigureOnboardingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigureOnboardingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartOnboardingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartOnboardingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartOnboarding(ctx context.Context, body StartOnboardingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartOnboardingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganization(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganization(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganization(ctx context.Context, organizationId PathOrganizationId, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListActivityLogs(ctx context.Context, organizationId PathOrganizationId, params *ListActivityLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListActivityLogsRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteCheckoutSessionWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteCheckoutSessionRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteCheckoutSession(ctx context.Context, organizationId PathOrganizationId, body CompleteCheckoutSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteCheckoutSessionRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBillingPortalSessionWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBillingPortalSessionRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBillingPortalSession(ctx context.Context, organizationId PathOrganizationId, body CreateBillingPortalSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBillingPortalSessionRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCheckoutSessionWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCheckoutSessionRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCheckoutSession(ctx context.Context, organizationId PathOrganizationId, body CreateCheckoutSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCheckoutSessionRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomerInformationWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomerInformationRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomerInformation(ctx context.Context, organizationId PathOrganizationId, body UpdateCustomerInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomerInformationRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListInvoices(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInvoicesRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaymentInformation(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentInformationRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubscriptionInformation(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubscriptionInformationRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBillingUsage(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBillingUsageRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListChangesets(ctx context.Context, organizationId PathOrganizationId, params *ListChangesetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListChangesetsRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompareChangesets(ctx context.Context, organizationId PathOrganizationId, params *CompareChangesetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompareChangesetsRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplyChangeset(ctx context.Context, organizationId PathOrganizationId, changesetId PathChangesetId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplyChangesetRequest(c.Server, organizationId, changesetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListClusters(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListClustersRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClusterWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClusterRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCluster(ctx context.Context, organizationId PathOrganizationId, body CreateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClusterRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCluster(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClusterRequest(c.Server, organizationId, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCluster(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterRequest(c.Server, organizationId, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateClusterWithBody(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateClusterRequestWithBody(c.Server, organizationId, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCluster(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, body UpdateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateClusterRequest(c.Server, organizationId, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDistributionSum(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, metricId PathDistributionMetricId, params *GetDistributionSumParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDistributionSumRequest(c.Server, organizationId, clusterId, metricId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDistributionTimeSeries(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, metricId PathDistributionMetricId, params *GetDistributionTimeSeriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDistributionTimeSeriesRequest(c.Server, organizationId, clusterId, metricId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterHealth(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterHealthRequest(c.Server, organizationId, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RunHealthChecksWithBody(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRunHealthChecksRequestWithBody(c.Server, organizationId, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RunHealthChecks(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, body RunHealthChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRunHealthChecksRequest(c.Server, organizationId, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PingCluster(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPingClusterRequest(c.Server, organizationId, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListClusterReplicas(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, params *ListClusterReplicasParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListClusterReplicasRequest(c.Server, organizationId, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServiceAccounts(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServiceAccountsRequest(c.Server, organizationId, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceAccountWithBody(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceAccountRequestWithBody(c.Server, organizationId, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceAccount(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, body CreateServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceAccountRequest(c.Server, organizationId, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServiceAccount(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, serviceAccountId PathServiceAccountId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceAccountRequest(c.Server, organizationId, clusterId, serviceAccountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAccount(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, serviceAccountId PathServiceAccountId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAccountRequest(c.Server, organizationId, clusterId, serviceAccountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAccountToken(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, serviceAccountId PathServiceAccountId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAccountTokenRequest(c.Server, organizationId, clusterId, serviceAccountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettings(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsRequest(c.Server, organizationId, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSettingsWithBody(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSettingsRequestWithBody(c.Server, organizationId, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSettings(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, body PatchSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSettingsRequest(c.Server, organizationId, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSettingsWithBody(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSettingsRequestWithBody(c.Server, organizationId, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSettings(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, body UpdateSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSettingsRequest(c.Server, organizationId, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimeSeries(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, metricId PathTimeSeriesMetricId, params *GetTimeSeriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimeSeriesRequest(c.Server, organizationId, clusterId, metricId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimeSeriesSum(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, metricId PathTimeSeriesMetricId, params *GetTimeSeriesSumParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimeSeriesSumRequest(c.Server, organizationId, clusterId, metricId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RotateClusterToken(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRotateClusterTokenRequest(c.Server, organizationId, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCustomDomains(ctx context.Context, organizationId PathOrganizationId, params *ListCustomDomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCustomDomainsRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCustomDomainWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCustomDomainRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCustomDomain(ctx context.Context, organizationId PathOrganizationId, body AddCustomDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCustomDomainRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomDomain(ctx context.Context, organizationId PathOrganizationId, customDomainId PathCustomDomainId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomDomainRequest(c.Server, organizationId, customDomainId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetryCustomDomain(ctx context.Context, organizationId PathOrganizationId, customDomainId PathCustomDomainId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetryCustomDomainRequest(c.Server, organizationId, customDomainId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizationInvites(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationInvitesRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationInviteWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationInviteRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationInvite(ctx context.Context, organizationId PathOrganizationId, body CreateOrganizationInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationInviteRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationInvite(ctx context.Context, organizationId PathOrganizationId, invitationId PathInvitationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationInviteRequest(c.Server, organizationId, invitationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListKeyPairs(ctx context.Context, organizationId PathOrganizationId, params *ListKeyPairsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListKeyPairsRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateKeyPairWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateKeyPairRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateKeyPair(ctx context.Context, organizationId PathOrganizationId, body CreateKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateKeyPairRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteKeyPair(ctx context.Context, organizationId PathOrganizationId, keyPairId PathKeyPairId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteKeyPairRequest(c.Server, organizationId, keyPairId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeyPair(ctx context.Context, organizationId PathOrganizationId, keyPairId PathKeyPairId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeyPairRequest(c.Server, organizationId, keyPairId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateKeyPairWithBody(ctx context.Context, organizationId PathOrganizationId, keyPairId PathKeyPairId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateKeyPairRequestWithBody(c.Server, organizationId, keyPairId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateKeyPair(ctx context.Context, organizationId PathOrganizationId, keyPairId PathKeyPairId, body UpdateKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateKeyPairRequest(c.Server, organizationId, keyPairId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LeaveOrganization(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLeaveOrganizationRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListNamespaces(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListNamespacesRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPolicies(ctx context.Context, organizationId PathOrganizationId, params *ListPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPoliciesRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePolicyWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePolicyRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePolicy(ctx context.Context, organizationId PathOrganizationId, body CreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePolicyRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePolicy(ctx context.Context, organizationId PathOrganizationId, policyId PathPolicyId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePolicyRequest(c.Server, organizationId, policyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolicy(ctx context.Context, organizationId PathOrganizationId, policyId PathPolicyId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPolicyRequest(c.Server, organizationId, policyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePolicyWithBody(ctx context.Context, organizationId PathOrganizationId, policyId PathPolicyId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePolicyRequestWithBody(c.Server, organizationId, policyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePolicy(ctx context.Context, organizationId PathOrganizationId, policyId PathPolicyId, body UpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePolicyRequest(c.Server, organizationId, policyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRoutes(ctx context.Context, organizationId PathOrganizationId, params *ListRoutesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRoutesRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRouteWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRouteRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoute(ctx context.Context, organizationId PathOrganizationId, body CreateRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRouteRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRoute(ctx context.Context, organizationId PathOrganizationId, routeId PathRouteId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRouteRequest(c.Server, organizationId, routeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRoute(ctx context.Context, organizationId PathOrganizationId, routeId PathRouteId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRouteRequest(c.Server, organizationId, routeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRouteWithBody(ctx context.Context, organizationId PathOrganizationId, routeId PathRouteId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRouteRequestWithBody(c.Server, organizationId, routeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRoute(ctx context.Context, organizationId PathOrganizationId, routeId PathRouteId, body UpdateRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRouteRequest(c.Server, organizationId, routeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRouteCertificates(ctx context.Context, organizationId PathOrganizationId, routeId PathRouteId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRouteCertificatesRequest(c.Server, organizationId, routeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsersInOrganization(ctx context.Context, organizationId PathOrganizationId, params *ListUsersInOrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsersInOrganizationRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiAccessUserWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiAccessUserRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiAccessUser(ctx context.Context, organizationId PathOrganizationId, body CreateApiAccessUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiAccessUserRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserFromOrganization(ctx context.Context, organizationId PathOrganizationId, userId PathUserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveUserFromOrganizationRequest(c.Server, organizationId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RenewApiUserRefreshToken(ctx context.Context, organizationId PathOrganizationId, userId PathUserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRenewApiUserRefreshTokenRequest(c.Server, organizationId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdToken(ctx context.Context, body GetIdTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCurrentUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCurrentUserInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCurrentUserInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUserInvitations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUserInvitationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcceptInvitation(ctx context.Context, invitationId PathInvitationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptInvitationRequest(c.Server, invitationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RejectInvitation(ctx context.Context, invitationId PathInvitationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRejectInvitationRequest(c.Server, invitationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCheckIdentityProviderSettingsRequest calls the generic CheckIdentityProviderSettings builder with application/json body
func NewCheckIdentityProviderSettingsRequest(server string, body CheckIdentityProviderSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckIdentityProviderSettingsRequestWithBody(server, "application/json", bodyReader)
}

// NewCheckIdentityProviderSettingsRequestWithBody generates requests for CheckIdentityProviderSettings with any type of body
func NewCheckIdentityProviderSettingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/checkIdentityProviderSettings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDefaultTemplatesRequest generates requests for ListDefaultTemplates
func NewListDefaultTemplatesRequest(server string, recordType PathRecordType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recordType", runtime.ParamLocationPath, recordType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/defaultTemplates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGenerateSubdomainNameRequest generates requests for GenerateSubdomainName
func NewGenerateSubdomainNameRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/generateSubdomainName")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthorizeNotificationsRequestWithFormdataBody calls the generic AuthorizeNotifications builder with application/x-www-form-urlencoded body
func NewAuthorizeNotificationsRequestWithFormdataBody(server string, body AuthorizeNotificationsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAuthorizeNotificationsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewAuthorizeNotificationsRequestWithBody generates requests for AuthorizeNotifications with any type of body
func NewAuthorizeNotificationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/authorize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCompleteOnboardingRequest generates requests for CompleteOnboarding
func NewCompleteOnboardingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/onboarding/complete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfigureOnboardingRequest calls the generic ConfigureOnboarding builder with application/json body
func NewConfigureOnboardingRequest(server string, body ConfigureOnboardingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConfigureOnboardingRequestWithBody(server, "application/json", bodyReader)
}

// NewConfigureOnboardingRequestWithBody generates requests for ConfigureOnboarding with any type of body
func NewConfigureOnboardingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/onboarding/configure")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStartOnboardingRequest calls the generic StartOnboarding builder with application/json body
func NewStartOnboardingRequest(server string, body StartOnboardingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStartOnboardingRequestWithBody(server, "application/json", bodyReader)
}

// NewStartOnboardingRequestWithBody generates requests for StartOnboarding with any type of body
func NewStartOnboardingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/onboarding/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListOrganizationsRequest generates requests for ListOrganizations
func NewListOrganizationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationRequest calls the generic CreateOrganization builder with application/json body
func NewCreateOrganizationRequest(server string, body CreateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrganizationRequestWithBody generates requests for CreateOrganization with any type of body
func NewCreateOrganizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationRequest generates requests for DeleteOrganization
func NewDeleteOrganizationRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationRequest generates requests for GetOrganization
func NewGetOrganizationRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrganizationRequest calls the generic UpdateOrganization builder with application/json body
func NewUpdateOrganizationRequest(server string, organizationId PathOrganizationId, body UpdateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewUpdateOrganizationRequestWithBody generates requests for UpdateOrganization with any type of body
func NewUpdateOrganizationRequestWithBody(server string, organizationId PathOrganizationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListActivityLogsRequest generates requests for ListActivityLogs
func NewListActivityLogsRequest(server string, organizationId PathOrganizationId, params *ListActivityLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/activityLogs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ActivityType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "activityType", runtime.ParamLocationQuery, *params.ActivityType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EntityId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entityId", runtime.ParamLocationQuery, *params.EntityId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EntityType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entityType", runtime.ParamLocationQuery, *params.EntityType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChangesetId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "changesetId", runtime.ParamLocationQuery, *params.ChangesetId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NamespaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespaceId", runtime.ParamLocationQuery, *params.NamespaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCompleteCheckoutSessionRequest calls the generic CompleteCheckoutSession builder with application/json body
func NewCompleteCheckoutSessionRequest(server string, organizationId PathOrganizationId, body CompleteCheckoutSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompleteCheckoutSessionRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCompleteCheckoutSessionRequestWithBody generates requests for CompleteCheckoutSession with any type of body
func NewCompleteCheckoutSessionRequestWithBody(server string, organizationId PathOrganizationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/billing/completeCheckoutSession", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateBillingPortalSessionRequest calls the generic CreateBillingPortalSession builder with application/json body
func NewCreateBillingPortalSessionRequest(server string, organizationId PathOrganizationId, body CreateBillingPortalSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBillingPortalSessionRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreateBillingPortalSessionRequestWithBody generates requests for CreateBillingPortalSession with any type of body
func NewCreateBillingPortalSessionRequestWithBody(server string, organizationId PathOrganizationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/billing/createBillingPortalSession", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateCheckoutSessionRequest calls the generic CreateCheckoutSession builder with application/json body
func NewCreateCheckoutSessionRequest(server string, organizationId PathOrganizationId, body CreateCheckoutSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCheckoutSessionRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreateCheckoutSessionRequestWithBody generates requests for CreateCheckoutSession with any type of body
func NewCreateCheckoutSessionRequestWithBody(server string, organizationId PathOrganizationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/billing/createCheckoutSession", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateCustomerInformationRequest calls the generic UpdateCustomerInformation builder with application/json body
func NewUpdateCustomerInformationRequest(server string, organizationId PathOrganizationId, body UpdateCustomerInformationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCustomerInformationRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewUpdateCustomerInformationRequestWithBody generates requests for UpdateCustomerInformation with any type of body
func NewUpdateCustomerInformationRequestWithBody(server string, organizationId PathOrganizationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/billing/customer", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListInvoicesRequest generates requests for ListInvoices
func NewListInvoicesRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/billing/invoices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPaymentInformationRequest generates requests for GetPaymentInformation
func NewGetPaymentInformationRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/billing/paymentInformation", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSubscriptionInformationRequest generates requests for GetSubscriptionInformation
func NewGetSubscriptionInformationRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/billing/subscription", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBillingUsageRequest generates requests for GetBillingUsage
func NewGetBillingUsageRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/billing/usage", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListChangesetsRequest generates requests for ListChangesets
func NewListChangesetsRequest(server string, organizationId PathOrganizationId, params *ListChangesetsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/changesets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClusterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCompareChangesetsRequest generates requests for CompareChangesets
func NewCompareChangesetsRequest(server string, organizationId PathOrganizationId, params *CompareChangesetsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/changesets/compare", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FirstId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "firstId", runtime.ParamLocationQuery, *params.FirstId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SecondId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secondId", runtime.ParamLocationQuery, *params.SecondId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplyChangesetRequest generates requests for ApplyChangeset
func NewApplyChangesetRequest(server string, organizationId PathOrganizationId, changesetId PathChangesetId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "changesetId", runtime.ParamLocationPath, changesetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/changesets/%s/apply", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListClustersRequest generates requests for ListClusters
func NewListClustersRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateClusterRequest calls the generic CreateCluster builder with application/json body
func NewCreateClusterRequest(server string, organizationId PathOrganizationId, body CreateClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateClusterRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreateClusterRequestWithBody generates requests for CreateCluster with any type of body
func NewCreateClusterRequestWithBody(server string, organizationId PathOrganizationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteClusterRequest generates requests for DeleteCluster
func NewDeleteClusterRequest(server string, organizationId PathOrganizationId, clusterId PathClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterRequest generates requests for GetCluster
func NewGetClusterRequest(server string, organizationId PathOrganizationId, clusterId PathClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateClusterRequest calls the generic UpdateCluster builder with application/json body
func NewUpdateClusterRequest(server string, organizationId PathOrganizationId, clusterId PathClusterId, body UpdateClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateClusterRequestWithBody(server, organizationId, clusterId, "application/json", bodyReader)
}

// NewUpdateClusterRequestWithBody generates requests for UpdateCluster with any type of body
func NewUpdateClusterRequestWithBody(server string, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDistributionSumRequest generates requests for GetDistributionSum
func NewGetDistributionSumRequest(server string, organizationId PathOrganizationId, clusterId PathClusterId, metricId PathDistributionMetricId, params *GetDistributionSumParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "metricId", runtime.ParamLocationPath, metricId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s/distribution/%s/sum", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.RouteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "routeId", runtime.ParamLocationQuery, *params.RouteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReplicaId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "replicaId", runtime.ParamLocationQuery, *params.ReplicaId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDistributionTimeSeriesRequest generates requests for GetDistributionTimeSeries
func NewGetDistributionTimeSeriesRequest(server string, organizationId PathOrganizationId, clusterId PathClusterId, metricId PathDistributionMetricId, params *GetDistributionTimeSeriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "metricId", runtime.ParamLocationPath, metricId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s/distribution/%s/timeSeries", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Percentile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "percentile", runtime.ParamLocationQuery, *params.Percentile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.RouteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "routeId", runtime.ParamLocationQuery, *params.RouteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReplicaId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "replicaId", runtime.ParamLocationQuery, *params.ReplicaId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterHealthRequest generates requests for GetClusterHealth
func NewGetClusterHealthRequest(server string, organizationId PathOrganizationId, clusterId PathClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s/health", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRunHealthChecksRequest calls the generic RunHealthChecks builder with application/json body
func NewRunHealthChecksRequest(server string, organizationId PathOrganizationId, clusterId PathClusterId, body RunHealthChecksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRunHealthChecksRequestWithBody(server, organizationId, clusterId, "application/json", bodyReader)
}

// NewRunHealthChecksRequestWithBody generates requests for RunHealthChecks with any type of body
func NewRunHealthChecksRequestWithBody(server string, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s/health", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPingClusterRequest generates requests for PingCluster
func NewPingClusterRequest(server string, organizationId PathOrganizationId, clusterId PathClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s/ping", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListClusterReplicasRequest generates requests for ListClusterReplicas
func NewListClusterReplicasRequest(server string, organizationId PathOrganizationId, clusterId PathClusterId, params *ListClusterReplicasParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s/replicas", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListServiceAccountsRequest generates requests for ListServiceAccounts
func NewListServiceAccountsRequest(server string, organizationId PathOrganizationId, clusterId PathClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s/serviceAccounts", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServiceAccountRequest calls the generic CreateServiceAccount builder with application/json body
func NewCreateServiceAccountRequest(server string, organizationId PathOrganizationId, clusterId PathClusterId, body CreateServiceAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateServiceAccountRequestWithBody(server, organizationId, clusterId, "application/json", bodyReader)
}

// NewCreateServiceAccountRequestWithBody generates requests for CreateServiceAccount with any type of body
func NewCreateServiceAccountRequestWithBody(server string, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s/serviceAccounts", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceAccountRequest generates requests for DeleteServiceAccount
func NewDeleteServiceAccountRequest(server string, organizationId PathOrganizationId, clusterId PathClusterId, serviceAccountId PathServiceAccountId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "serviceAccountId", runtime.ParamLocationPath, serviceAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s/serviceAccounts/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceAccountRequest generates requests for GetServiceAccount
func NewGetServiceAccountRequest(server string, organizationId PathOrganizationId, clusterId PathClusterId, serviceAccountId PathServiceAccountId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "serviceAccountId", runtime.ParamLocationPath, serviceAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s/serviceAccounts/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceAccountTokenRequest generates requests for GetServiceAccountToken
func NewGetServiceAccountTokenRequest(server string, organizationId PathOrganizationId, clusterId PathClusterId, serviceAccountId PathServiceAccountId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "serviceAccountId", runtime.ParamLocationPath, serviceAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s/serviceAccounts/%s/token", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSettingsRequest generates requests for GetSettings
func NewGetSettingsRequest(server string, organizationId PathOrganizationId, clusterId PathClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s/settings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSettingsRequest calls the generic PatchSettings builder with application/json body
func NewPatchSettingsRequest(server string, organizationId PathOrganizationId, clusterId PathClusterId, body PatchSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSettingsRequestWithBody(server, organizationId, clusterId, "application/json", bodyReader)
}

// NewPatchSettingsRequestWithBody generates requests for PatchSettings with any type of body
func NewPatchSettingsRequestWithBody(server string, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s/settings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateSettingsRequest calls the generic UpdateSettings builder with application/json body
func NewUpdateSettingsRequest(server string, organizationId PathOrganizationId, clusterId PathClusterId, body UpdateSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSettingsRequestWithBody(server, organizationId, clusterId, "application/json", bodyReader)
}

// NewUpdateSettingsRequestWithBody generates requests for UpdateSettings with any type of body
func NewUpdateSettingsRequestWithBody(server string, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s/settings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTimeSeriesRequest generates requests for GetTimeSeries
func NewGetTimeSeriesRequest(server string, organizationId PathOrganizationId, clusterId PathClusterId, metricId PathTimeSeriesMetricId, params *GetTimeSeriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "metricId", runtime.ParamLocationPath, metricId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s/timeSeries/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.RouteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "routeId", runtime.ParamLocationQuery, *params.RouteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReplicaId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "replicaId", runtime.ParamLocationQuery, *params.ReplicaId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTimeSeriesSumRequest generates requests for GetTimeSeriesSum
func NewGetTimeSeriesSumRequest(server string, organizationId PathOrganizationId, clusterId PathClusterId, metricId PathTimeSeriesMetricId, params *GetTimeSeriesSumParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "metricId", runtime.ParamLocationPath, metricId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s/timeSeries/%s/sum", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.RouteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "routeId", runtime.ParamLocationQuery, *params.RouteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReplicaId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "replicaId", runtime.ParamLocationQuery, *params.ReplicaId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRotateClusterTokenRequest generates requests for RotateClusterToken
func NewRotateClusterTokenRequest(server string, organizationId PathOrganizationId, clusterId PathClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s/token", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListCustomDomainsRequest generates requests for ListCustomDomains
func NewListCustomDomainsRequest(server string, organizationId PathOrganizationId, params *ListCustomDomainsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/customDomains", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddCustomDomainRequest calls the generic AddCustomDomain builder with application/json body
func NewAddCustomDomainRequest(server string, organizationId PathOrganizationId, body AddCustomDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddCustomDomainRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewAddCustomDomainRequestWithBody generates requests for AddCustomDomain with any type of body
func NewAddCustomDomainRequestWithBody(server string, organizationId PathOrganizationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/customDomains", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomDomainRequest generates requests for DeleteCustomDomain
func NewDeleteCustomDomainRequest(server string, organizationId PathOrganizationId, customDomainId PathCustomDomainId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "customDomainId", runtime.ParamLocationPath, customDomainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/customDomains/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetryCustomDomainRequest generates requests for RetryCustomDomain
func NewRetryCustomDomainRequest(server string, organizationId PathOrganizationId, customDomainId PathCustomDomainId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "customDomainId", runtime.ParamLocationPath, customDomainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/customDomains/%s/retry", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrganizationInvitesRequest generates requests for ListOrganizationInvites
func NewListOrganizationInvitesRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/invitations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationInviteRequest calls the generic CreateOrganizationInvite builder with application/json body
func NewCreateOrganizationInviteRequest(server string, organizationId PathOrganizationId, body CreateOrganizationInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationInviteRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreateOrganizationInviteRequestWithBody generates requests for CreateOrganizationInvite with any type of body
func NewCreateOrganizationInviteRequestWithBody(server string, organizationId PathOrganizationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/invitations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationInviteRequest generates requests for DeleteOrganizationInvite
func NewDeleteOrganizationInviteRequest(server string, organizationId PathOrganizationId, invitationId PathInvitationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invitationId", runtime.ParamLocationPath, invitationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/invitations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListKeyPairsRequest generates requests for ListKeyPairs
func NewListKeyPairsRequest(server string, organizationId PathOrganizationId, params *ListKeyPairsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/keyPairs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespaceId", runtime.ParamLocationQuery, params.NamespaceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.IncludeDescendants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeDescendants", runtime.ParamLocationQuery, *params.IncludeDescendants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateKeyPairRequest calls the generic CreateKeyPair builder with application/json body
func NewCreateKeyPairRequest(server string, organizationId PathOrganizationId, body CreateKeyPairJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateKeyPairRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreateKeyPairRequestWithBody generates requests for CreateKeyPair with any type of body
func NewCreateKeyPairRequestWithBody(server string, organizationId PathOrganizationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/keyPairs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteKeyPairRequest generates requests for DeleteKeyPair
func NewDeleteKeyPairRequest(server string, organizationId PathOrganizationId, keyPairId PathKeyPairId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyPairId", runtime.ParamLocationPath, keyPairId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/keyPairs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKeyPairRequest generates requests for GetKeyPair
func NewGetKeyPairRequest(server string, organizationId PathOrganizationId, keyPairId PathKeyPairId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyPairId", runtime.ParamLocationPath, keyPairId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/keyPairs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateKeyPairRequest calls the generic UpdateKeyPair builder with application/json body
func NewUpdateKeyPairRequest(server string, organizationId PathOrganizationId, keyPairId PathKeyPairId, body UpdateKeyPairJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateKeyPairRequestWithBody(server, organizationId, keyPairId, "application/json", bodyReader)
}

// NewUpdateKeyPairRequestWithBody generates requests for UpdateKeyPair with any type of body
func NewUpdateKeyPairRequestWithBody(server string, organizationId PathOrganizationId, keyPairId PathKeyPairId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyPairId", runtime.ParamLocationPath, keyPairId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/keyPairs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLeaveOrganizationRequest generates requests for LeaveOrganization
func NewLeaveOrganizationRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/leave", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListNamespacesRequest generates requests for ListNamespaces
func NewListNamespacesRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/namespaces", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPoliciesRequest generates requests for ListPolicies
func NewListPoliciesRequest(server string, organizationId PathOrganizationId, params *ListPoliciesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespaceId", runtime.ParamLocationQuery, params.NamespaceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.IncludeDescendants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeDescendants", runtime.ParamLocationQuery, *params.IncludeDescendants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePolicyRequest calls the generic CreatePolicy builder with application/json body
func NewCreatePolicyRequest(server string, organizationId PathOrganizationId, body CreatePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePolicyRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreatePolicyRequestWithBody generates requests for CreatePolicy with any type of body
func NewCreatePolicyRequestWithBody(server string, organizationId PathOrganizationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePolicyRequest generates requests for DeletePolicy
func NewDeletePolicyRequest(server string, organizationId PathOrganizationId, policyId PathPolicyId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/policies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPolicyRequest generates requests for GetPolicy
func NewGetPolicyRequest(server string, organizationId PathOrganizationId, policyId PathPolicyId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/policies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePolicyRequest calls the generic UpdatePolicy builder with application/json body
func NewUpdatePolicyRequest(server string, organizationId PathOrganizationId, policyId PathPolicyId, body UpdatePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePolicyRequestWithBody(server, organizationId, policyId, "application/json", bodyReader)
}

// NewUpdatePolicyRequestWithBody generates requests for UpdatePolicy with any type of body
func NewUpdatePolicyRequestWithBody(server string, organizationId PathOrganizationId, policyId PathPolicyId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/policies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRoutesRequest generates requests for ListRoutes
func NewListRoutesRequest(server string, organizationId PathOrganizationId, params *ListRoutesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/routes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespaceId", runtime.ParamLocationQuery, params.NamespaceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.IncludeDescendants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeDescendants", runtime.ParamLocationQuery, *params.IncludeDescendants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRouteRequest calls the generic CreateRoute builder with application/json body
func NewCreateRouteRequest(server string, organizationId PathOrganizationId, body CreateRouteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRouteRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreateRouteRequestWithBody generates requests for CreateRoute with any type of body
func NewCreateRouteRequestWithBody(server string, organizationId PathOrganizationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/routes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRouteRequest generates requests for DeleteRoute
func NewDeleteRouteRequest(server string, organizationId PathOrganizationId, routeId PathRouteId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "routeId", runtime.ParamLocationPath, routeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/routes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRouteRequest generates requests for GetRoute
func NewGetRouteRequest(server string, organizationId PathOrganizationId, routeId PathRouteId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "routeId", runtime.ParamLocationPath, routeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/routes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRouteRequest calls the generic UpdateRoute builder with application/json body
func NewUpdateRouteRequest(server string, organizationId PathOrganizationId, routeId PathRouteId, body UpdateRouteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRouteRequestWithBody(server, organizationId, routeId, "application/json", bodyReader)
}

// NewUpdateRouteRequestWithBody generates requests for UpdateRoute with any type of body
func NewUpdateRouteRequestWithBody(server string, organizationId PathOrganizationId, routeId PathRouteId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "routeId", runtime.ParamLocationPath, routeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/routes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRouteCertificatesRequest generates requests for GetRouteCertificates
func NewGetRouteCertificatesRequest(server string, organizationId PathOrganizationId, routeId PathRouteId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "routeId", runtime.ParamLocationPath, routeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/routes/%s/certificates", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUsersInOrganizationRequest generates requests for ListUsersInOrganization
func NewListUsersInOrganizationRequest(server string, organizationId PathOrganizationId, params *ListUsersInOrganizationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userType", runtime.ParamLocationQuery, *params.UserType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApiAccessUserRequest calls the generic CreateApiAccessUser builder with application/json body
func NewCreateApiAccessUserRequest(server string, organizationId PathOrganizationId, body CreateApiAccessUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApiAccessUserRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreateApiAccessUserRequestWithBody generates requests for CreateApiAccessUser with any type of body
func NewCreateApiAccessUserRequestWithBody(server string, organizationId PathOrganizationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/apiAccess", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveUserFromOrganizationRequest generates requests for RemoveUserFromOrganization
func NewRemoveUserFromOrganizationRequest(server string, organizationId PathOrganizationId, userId PathUserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRenewApiUserRefreshTokenRequest generates requests for RenewApiUserRefreshToken
func NewRenewApiUserRefreshTokenRequest(server string, organizationId PathOrganizationId, userId PathUserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s/refreshToken", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdTokenRequest calls the generic GetIdToken builder with application/json body
func NewGetIdTokenRequest(server string, body GetIdTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIdTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIdTokenRequestWithBody generates requests for GetIdToken with any type of body
func NewGetIdTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCurrentUserRequest generates requests for DeleteCurrentUser
func NewDeleteCurrentUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCurrentUserInfoRequest generates requests for UpdateCurrentUserInfo
func NewUpdateCurrentUserInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUserInvitationsRequest generates requests for ListUserInvitations
func NewListUserInvitationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/invitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAcceptInvitationRequest generates requests for AcceptInvitation
func NewAcceptInvitationRequest(server string, invitationId PathInvitationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invitationId", runtime.ParamLocationPath, invitationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/invitations/%s/accept", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRejectInvitationRequest generates requests for RejectInvitation
func NewRejectInvitationRequest(server string, invitationId PathInvitationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invitationId", runtime.ParamLocationPath, invitationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/invitations/%s/reject", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CheckIdentityProviderSettingsWithBodyWithResponse request with any body
	CheckIdentityProviderSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckIdentityProviderSettingsAPIResponse, error)

	CheckIdentityProviderSettingsWithResponse(ctx context.Context, body CheckIdentityProviderSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckIdentityProviderSettingsAPIResponse, error)

	// ListDefaultTemplatesWithResponse request
	ListDefaultTemplatesWithResponse(ctx context.Context, recordType PathRecordType, reqEditors ...RequestEditorFn) (*ListDefaultTemplatesAPIResponse, error)

	// GenerateSubdomainNameWithResponse request
	GenerateSubdomainNameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GenerateSubdomainNameAPIResponse, error)

	// AuthorizeNotificationsWithBodyWithResponse request with any body
	AuthorizeNotificationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthorizeNotificationsAPIResponse, error)

	AuthorizeNotificationsWithFormdataBodyWithResponse(ctx context.Context, body AuthorizeNotificationsFormdataRequestBody, reqEditors ...RequestEditorFn) (*AuthorizeNotificationsAPIResponse, error)

	// CompleteOnboardingWithResponse request
	CompleteOnboardingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CompleteOnboardingAPIResponse, error)

	// ConfigureOnboardingWithBodyWithResponse request with any body
	ConfigureOnboardingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConfigureOnboardingAPIResponse, error)

	ConfigureOnboardingWithResponse(ctx context.Context, body ConfigureOnboardingJSONRequestBody, reqEditors ...RequestEditorFn) (*ConfigureOnboardingAPIResponse, error)

	// StartOnboardingWithBodyWithResponse request with any body
	StartOnboardingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartOnboardingAPIResponse, error)

	StartOnboardingWithResponse(ctx context.Context, body StartOnboardingJSONRequestBody, reqEditors ...RequestEditorFn) (*StartOnboardingAPIResponse, error)

	// ListOrganizationsWithResponse request
	ListOrganizationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListOrganizationsAPIResponse, error)

	// CreateOrganizationWithBodyWithResponse request with any body
	CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationAPIResponse, error)

	CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationAPIResponse, error)

	// DeleteOrganizationWithResponse request
	DeleteOrganizationWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*DeleteOrganizationAPIResponse, error)

	// GetOrganizationWithResponse request
	GetOrganizationWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetOrganizationAPIResponse, error)

	// UpdateOrganizationWithBodyWithResponse request with any body
	UpdateOrganizationWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationAPIResponse, error)

	UpdateOrganizationWithResponse(ctx context.Context, organizationId PathOrganizationId, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationAPIResponse, error)

	// ListActivityLogsWithResponse request
	ListActivityLogsWithResponse(ctx context.Context, organizationId PathOrganizationId, params *ListActivityLogsParams, reqEditors ...RequestEditorFn) (*ListActivityLogsAPIResponse, error)

	// CompleteCheckoutSessionWithBodyWithResponse request with any body
	CompleteCheckoutSessionWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteCheckoutSessionAPIResponse, error)

	CompleteCheckoutSessionWithResponse(ctx context.Context, organizationId PathOrganizationId, body CompleteCheckoutSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteCheckoutSessionAPIResponse, error)

	// CreateBillingPortalSessionWithBodyWithResponse request with any body
	CreateBillingPortalSessionWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBillingPortalSessionAPIResponse, error)

	CreateBillingPortalSessionWithResponse(ctx context.Context, organizationId PathOrganizationId, body CreateBillingPortalSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBillingPortalSessionAPIResponse, error)

	// CreateCheckoutSessionWithBodyWithResponse request with any body
	CreateCheckoutSessionWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCheckoutSessionAPIResponse, error)

	CreateCheckoutSessionWithResponse(ctx context.Context, organizationId PathOrganizationId, body CreateCheckoutSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCheckoutSessionAPIResponse, error)

	// UpdateCustomerInformationWithBodyWithResponse request with any body
	UpdateCustomerInformationWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomerInformationAPIResponse, error)

	UpdateCustomerInformationWithResponse(ctx context.Context, organizationId PathOrganizationId, body UpdateCustomerInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomerInformationAPIResponse, error)

	// ListInvoicesWithResponse request
	ListInvoicesWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*ListInvoicesAPIResponse, error)

	// GetPaymentInformationWithResponse request
	GetPaymentInformationWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetPaymentInformationAPIResponse, error)

	// GetSubscriptionInformationWithResponse request
	GetSubscriptionInformationWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetSubscriptionInformationAPIResponse, error)

	// GetBillingUsageWithResponse request
	GetBillingUsageWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetBillingUsageAPIResponse, error)

	// ListChangesetsWithResponse request
	ListChangesetsWithResponse(ctx context.Context, organizationId PathOrganizationId, params *ListChangesetsParams, reqEditors ...RequestEditorFn) (*ListChangesetsAPIResponse, error)

	// CompareChangesetsWithResponse request
	CompareChangesetsWithResponse(ctx context.Context, organizationId PathOrganizationId, params *CompareChangesetsParams, reqEditors ...RequestEditorFn) (*CompareChangesetsAPIResponse, error)

	// ApplyChangesetWithResponse request
	ApplyChangesetWithResponse(ctx context.Context, organizationId PathOrganizationId, changesetId PathChangesetId, reqEditors ...RequestEditorFn) (*ApplyChangesetAPIResponse, error)

	// ListClustersWithResponse request
	ListClustersWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*ListClustersAPIResponse, error)

	// CreateClusterWithBodyWithResponse request with any body
	CreateClusterWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClusterAPIResponse, error)

	CreateClusterWithResponse(ctx context.Context, organizationId PathOrganizationId, body CreateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClusterAPIResponse, error)

	// DeleteClusterWithResponse request
	DeleteClusterWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*DeleteClusterAPIResponse, error)

	// GetClusterWithResponse request
	GetClusterWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*GetClusterAPIResponse, error)

	// UpdateClusterWithBodyWithResponse request with any body
	UpdateClusterWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateClusterAPIResponse, error)

	UpdateClusterWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, body UpdateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateClusterAPIResponse, error)

	// GetDistributionSumWithResponse request
	GetDistributionSumWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, metricId PathDistributionMetricId, params *GetDistributionSumParams, reqEditors ...RequestEditorFn) (*GetDistributionSumAPIResponse, error)

	// GetDistributionTimeSeriesWithResponse request
	GetDistributionTimeSeriesWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, metricId PathDistributionMetricId, params *GetDistributionTimeSeriesParams, reqEditors ...RequestEditorFn) (*GetDistributionTimeSeriesAPIResponse, error)

	// GetClusterHealthWithResponse request
	GetClusterHealthWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*GetClusterHealthAPIResponse, error)

	// RunHealthChecksWithBodyWithResponse request with any body
	RunHealthChecksWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RunHealthChecksAPIResponse, error)

	RunHealthChecksWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, body RunHealthChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*RunHealthChecksAPIResponse, error)

	// PingClusterWithResponse request
	PingClusterWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*PingClusterAPIResponse, error)

	// ListClusterReplicasWithResponse request
	ListClusterReplicasWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, params *ListClusterReplicasParams, reqEditors ...RequestEditorFn) (*ListClusterReplicasAPIResponse, error)

	// ListServiceAccountsWithResponse request
	ListServiceAccountsWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*ListServiceAccountsAPIResponse, error)

	// CreateServiceAccountWithBodyWithResponse request with any body
	CreateServiceAccountWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceAccountAPIResponse, error)

	CreateServiceAccountWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, body CreateServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceAccountAPIResponse, error)

	// DeleteServiceAccountWithResponse request
	DeleteServiceAccountWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, serviceAccountId PathServiceAccountId, reqEditors ...RequestEditorFn) (*DeleteServiceAccountAPIResponse, error)

	// GetServiceAccountWithResponse request
	GetServiceAccountWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, serviceAccountId PathServiceAccountId, reqEditors ...RequestEditorFn) (*GetServiceAccountAPIResponse, error)

	// GetServiceAccountTokenWithResponse request
	GetServiceAccountTokenWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, serviceAccountId PathServiceAccountId, reqEditors ...RequestEditorFn) (*GetServiceAccountTokenAPIResponse, error)

	// GetSettingsWithResponse request
	GetSettingsWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*GetSettingsAPIResponse, error)

	// PatchSettingsWithBodyWithResponse request with any body
	PatchSettingsWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSettingsAPIResponse, error)

	PatchSettingsWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, body PatchSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSettingsAPIResponse, error)

	// UpdateSettingsWithBodyWithResponse request with any body
	UpdateSettingsWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSettingsAPIResponse, error)

	UpdateSettingsWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, body UpdateSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSettingsAPIResponse, error)

	// GetTimeSeriesWithResponse request
	GetTimeSeriesWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, metricId PathTimeSeriesMetricId, params *GetTimeSeriesParams, reqEditors ...RequestEditorFn) (*GetTimeSeriesAPIResponse, error)

	// GetTimeSeriesSumWithResponse request
	GetTimeSeriesSumWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, metricId PathTimeSeriesMetricId, params *GetTimeSeriesSumParams, reqEditors ...RequestEditorFn) (*GetTimeSeriesSumAPIResponse, error)

	// RotateClusterTokenWithResponse request
	RotateClusterTokenWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*RotateClusterTokenAPIResponse, error)

	// ListCustomDomainsWithResponse request
	ListCustomDomainsWithResponse(ctx context.Context, organizationId PathOrganizationId, params *ListCustomDomainsParams, reqEditors ...RequestEditorFn) (*ListCustomDomainsAPIResponse, error)

	// AddCustomDomainWithBodyWithResponse request with any body
	AddCustomDomainWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCustomDomainAPIResponse, error)

	AddCustomDomainWithResponse(ctx context.Context, organizationId PathOrganizationId, body AddCustomDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCustomDomainAPIResponse, error)

	// DeleteCustomDomainWithResponse request
	DeleteCustomDomainWithResponse(ctx context.Context, organizationId PathOrganizationId, customDomainId PathCustomDomainId, reqEditors ...RequestEditorFn) (*DeleteCustomDomainAPIResponse, error)

	// RetryCustomDomainWithResponse request
	RetryCustomDomainWithResponse(ctx context.Context, organizationId PathOrganizationId, customDomainId PathCustomDomainId, reqEditors ...RequestEditorFn) (*RetryCustomDomainAPIResponse, error)

	// ListOrganizationInvitesWithResponse request
	ListOrganizationInvitesWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*ListOrganizationInvitesAPIResponse, error)

	// CreateOrganizationInviteWithBodyWithResponse request with any body
	CreateOrganizationInviteWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationInviteAPIResponse, error)

	CreateOrganizationInviteWithResponse(ctx context.Context, organizationId PathOrganizationId, body CreateOrganizationInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationInviteAPIResponse, error)

	// DeleteOrganizationInviteWithResponse request
	DeleteOrganizationInviteWithResponse(ctx context.Context, organizationId PathOrganizationId, invitationId PathInvitationId, reqEditors ...RequestEditorFn) (*DeleteOrganizationInviteAPIResponse, error)

	// ListKeyPairsWithResponse request
	ListKeyPairsWithResponse(ctx context.Context, organizationId PathOrganizationId, params *ListKeyPairsParams, reqEditors ...RequestEditorFn) (*ListKeyPairsAPIResponse, error)

	// CreateKeyPairWithBodyWithResponse request with any body
	CreateKeyPairWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateKeyPairAPIResponse, error)

	CreateKeyPairWithResponse(ctx context.Context, organizationId PathOrganizationId, body CreateKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateKeyPairAPIResponse, error)

	// DeleteKeyPairWithResponse request
	DeleteKeyPairWithResponse(ctx context.Context, organizationId PathOrganizationId, keyPairId PathKeyPairId, reqEditors ...RequestEditorFn) (*DeleteKeyPairAPIResponse, error)

	// GetKeyPairWithResponse request
	GetKeyPairWithResponse(ctx context.Context, organizationId PathOrganizationId, keyPairId PathKeyPairId, reqEditors ...RequestEditorFn) (*GetKeyPairAPIResponse, error)

	// UpdateKeyPairWithBodyWithResponse request with any body
	UpdateKeyPairWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, keyPairId PathKeyPairId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateKeyPairAPIResponse, error)

	UpdateKeyPairWithResponse(ctx context.Context, organizationId PathOrganizationId, keyPairId PathKeyPairId, body UpdateKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateKeyPairAPIResponse, error)

	// LeaveOrganizationWithResponse request
	LeaveOrganizationWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*LeaveOrganizationAPIResponse, error)

	// ListNamespacesWithResponse request
	ListNamespacesWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*ListNamespacesAPIResponse, error)

	// ListPoliciesWithResponse request
	ListPoliciesWithResponse(ctx context.Context, organizationId PathOrganizationId, params *ListPoliciesParams, reqEditors ...RequestEditorFn) (*ListPoliciesAPIResponse, error)

	// CreatePolicyWithBodyWithResponse request with any body
	CreatePolicyWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePolicyAPIResponse, error)

	CreatePolicyWithResponse(ctx context.Context, organizationId PathOrganizationId, body CreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePolicyAPIResponse, error)

	// DeletePolicyWithResponse request
	DeletePolicyWithResponse(ctx context.Context, organizationId PathOrganizationId, policyId PathPolicyId, reqEditors ...RequestEditorFn) (*DeletePolicyAPIResponse, error)

	// GetPolicyWithResponse request
	GetPolicyWithResponse(ctx context.Context, organizationId PathOrganizationId, policyId PathPolicyId, reqEditors ...RequestEditorFn) (*GetPolicyAPIResponse, error)

	// UpdatePolicyWithBodyWithResponse request with any body
	UpdatePolicyWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, policyId PathPolicyId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePolicyAPIResponse, error)

	UpdatePolicyWithResponse(ctx context.Context, organizationId PathOrganizationId, policyId PathPolicyId, body UpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePolicyAPIResponse, error)

	// ListRoutesWithResponse request
	ListRoutesWithResponse(ctx context.Context, organizationId PathOrganizationId, params *ListRoutesParams, reqEditors ...RequestEditorFn) (*ListRoutesAPIResponse, error)

	// CreateRouteWithBodyWithResponse request with any body
	CreateRouteWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRouteAPIResponse, error)

	CreateRouteWithResponse(ctx context.Context, organizationId PathOrganizationId, body CreateRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRouteAPIResponse, error)

	// DeleteRouteWithResponse request
	DeleteRouteWithResponse(ctx context.Context, organizationId PathOrganizationId, routeId PathRouteId, reqEditors ...RequestEditorFn) (*DeleteRouteAPIResponse, error)

	// GetRouteWithResponse request
	GetRouteWithResponse(ctx context.Context, organizationId PathOrganizationId, routeId PathRouteId, reqEditors ...RequestEditorFn) (*GetRouteAPIResponse, error)

	// UpdateRouteWithBodyWithResponse request with any body
	UpdateRouteWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, routeId PathRouteId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRouteAPIResponse, error)

	UpdateRouteWithResponse(ctx context.Context, organizationId PathOrganizationId, routeId PathRouteId, body UpdateRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRouteAPIResponse, error)

	// GetRouteCertificatesWithResponse request
	GetRouteCertificatesWithResponse(ctx context.Context, organizationId PathOrganizationId, routeId PathRouteId, reqEditors ...RequestEditorFn) (*GetRouteCertificatesAPIResponse, error)

	// ListUsersInOrganizationWithResponse request
	ListUsersInOrganizationWithResponse(ctx context.Context, organizationId PathOrganizationId, params *ListUsersInOrganizationParams, reqEditors ...RequestEditorFn) (*ListUsersInOrganizationAPIResponse, error)

	// CreateApiAccessUserWithBodyWithResponse request with any body
	CreateApiAccessUserWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiAccessUserAPIResponse, error)

	CreateApiAccessUserWithResponse(ctx context.Context, organizationId PathOrganizationId, body CreateApiAccessUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApiAccessUserAPIResponse, error)

	// RemoveUserFromOrganizationWithResponse request
	RemoveUserFromOrganizationWithResponse(ctx context.Context, organizationId PathOrganizationId, userId PathUserId, reqEditors ...RequestEditorFn) (*RemoveUserFromOrganizationAPIResponse, error)

	// RenewApiUserRefreshTokenWithResponse request
	RenewApiUserRefreshTokenWithResponse(ctx context.Context, organizationId PathOrganizationId, userId PathUserId, reqEditors ...RequestEditorFn) (*RenewApiUserRefreshTokenAPIResponse, error)

	// GetIdTokenWithBodyWithResponse request with any body
	GetIdTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIdTokenAPIResponse, error)

	GetIdTokenWithResponse(ctx context.Context, body GetIdTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIdTokenAPIResponse, error)

	// DeleteCurrentUserWithResponse request
	DeleteCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteCurrentUserAPIResponse, error)

	// UpdateCurrentUserInfoWithResponse request
	UpdateCurrentUserInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UpdateCurrentUserInfoAPIResponse, error)

	// ListUserInvitationsWithResponse request
	ListUserInvitationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListUserInvitationsAPIResponse, error)

	// AcceptInvitationWithResponse request
	AcceptInvitationWithResponse(ctx context.Context, invitationId PathInvitationId, reqEditors ...RequestEditorFn) (*AcceptInvitationAPIResponse, error)

	// RejectInvitationWithResponse request
	RejectInvitationWithResponse(ctx context.Context, invitationId PathInvitationId, reqEditors ...RequestEditorFn) (*RejectInvitationAPIResponse, error)

	// GetVersionWithResponse request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionAPIResponse, error)
}

type CheckIdentityProviderSettingsAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckIdentityProviderSettingsResponse
}

// Status returns HTTPResponse.Status
func (r CheckIdentityProviderSettingsAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckIdentityProviderSettingsAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDefaultTemplatesAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListDefaultTemplatesResponse
}

// Status returns HTTPResponse.Status
func (r ListDefaultTemplatesAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDefaultTemplatesAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateSubdomainNameAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GenerateSubdomainNameResponse
}

// Status returns HTTPResponse.Status
func (r GenerateSubdomainNameAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateSubdomainNameAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthorizeNotificationsAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Auth string `json:"auth"`
	}
}

// Status returns HTTPResponse.Status
func (r AuthorizeNotificationsAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthorizeNotificationsAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteOnboardingAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CompleteOnboardingAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteOnboardingAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfigureOnboardingAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConfigureOnboardingResponse
}

// Status returns HTTPResponse.Status
func (r ConfigureOnboardingAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigureOnboardingAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartOnboardingAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StartOnboardingResponse
}

// Status returns HTTPResponse.Status
func (r StartOnboardingAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartOnboardingAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationsAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListOrganizationsResponse
}

// Status returns HTTPResponse.Status
func (r ListOrganizationsAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationsAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateOrganizationResponse
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetOrganizationResponse
}

// Status returns HTTPResponse.Status
func (r GetOrganizationAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrganizationAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateOrganizationResponse
}

// Status returns HTTPResponse.Status
func (r UpdateOrganizationAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListActivityLogsAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListActivityLogsResponse
}

// Status returns HTTPResponse.Status
func (r ListActivityLogsAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListActivityLogsAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteCheckoutSessionAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CompleteCheckoutSessionAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteCheckoutSessionAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBillingPortalSessionAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateBillingPortalSessionResponse
}

// Status returns HTTPResponse.Status
func (r CreateBillingPortalSessionAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBillingPortalSessionAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCheckoutSessionAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateCheckoutSessionResponse
}

// Status returns HTTPResponse.Status
func (r CreateCheckoutSessionAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCheckoutSessionAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCustomerInformationAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCustomerInformationAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCustomerInformationAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInvoicesAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListInvoicesResponse
}

// Status returns HTTPResponse.Status
func (r ListInvoicesAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInvoicesAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaymentInformationAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPaymentInformationResponse
}

// Status returns HTTPResponse.Status
func (r GetPaymentInformationAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaymentInformationAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubscriptionInformationAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSubscriptionInformationResponse
}

// Status returns HTTPResponse.Status
func (r GetSubscriptionInformationAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubscriptionInformationAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBillingUsageAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetBillingUsageResponse
}

// Status returns HTTPResponse.Status
func (r GetBillingUsageAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBillingUsageAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListChangesetsAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListChangesetsResponse
}

// Status returns HTTPResponse.Status
func (r ListChangesetsAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListChangesetsAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompareChangesetsAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompareChangesetsResponse
}

// Status returns HTTPResponse.Status
func (r CompareChangesetsAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompareChangesetsAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplyChangesetAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplyChangesetResponse
}

// Status returns HTTPResponse.Status
func (r ApplyChangesetAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplyChangesetAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListClustersAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListClustersResponse
}

// Status returns HTTPResponse.Status
func (r ListClustersAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListClustersAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateClusterAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateClusterResponse
}

// Status returns HTTPResponse.Status
func (r CreateClusterAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateClusterAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClusterAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClusterAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClusterAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusterAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetClusterResponse
}

// Status returns HTTPResponse.Status
func (r GetClusterAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateClusterAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateClusterResponse
}

// Status returns HTTPResponse.Status
func (r UpdateClusterAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateClusterAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDistributionSumAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDistributionMetricSumResponse
}

// Status returns HTTPResponse.Status
func (r GetDistributionSumAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDistributionSumAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDistributionTimeSeriesAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDistributionMetricTimeSeriesResponse
}

// Status returns HTTPResponse.Status
func (r GetDistributionTimeSeriesAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDistributionTimeSeriesAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusterHealthAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetClusterHealthResponse
}

// Status returns HTTPResponse.Status
func (r GetClusterHealthAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterHealthAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RunHealthChecksAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RunHealthChecksAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RunHealthChecksAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PingClusterAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PingClusterResponse
}

// Status returns HTTPResponse.Status
func (r PingClusterAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PingClusterAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListClusterReplicasAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListClusterReplicasResponse
}

// Status returns HTTPResponse.Status
func (r ListClusterReplicasAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListClusterReplicasAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServiceAccountsAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListServiceAccountsResponse
}

// Status returns HTTPResponse.Status
func (r ListServiceAccountsAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServiceAccountsAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServiceAccountAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateServiceAccountResponse
}

// Status returns HTTPResponse.Status
func (r CreateServiceAccountAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServiceAccountAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceAccountAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteServiceAccountAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceAccountAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAccountAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetServiceAccountResponse
}

// Status returns HTTPResponse.Status
func (r GetServiceAccountAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAccountAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAccountTokenAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetServiceAccountTokenResponse
}

// Status returns HTTPResponse.Status
func (r GetServiceAccountTokenAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAccountTokenAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSettingsResponse
}

// Status returns HTTPResponse.Status
func (r GetSettingsAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSettingsAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatchSettingsResponse
}

// Status returns HTTPResponse.Status
func (r PatchSettingsAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSettingsAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSettingsAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateSettingsResponse
}

// Status returns HTTPResponse.Status
func (r UpdateSettingsAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSettingsAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimeSeriesAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTimeSeriesResponse
}

// Status returns HTTPResponse.Status
func (r GetTimeSeriesAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimeSeriesAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimeSeriesSumAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTimeSeriesSumResponse
}

// Status returns HTTPResponse.Status
func (r GetTimeSeriesSumAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimeSeriesSumAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RotateClusterTokenAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetClusterTokenResponse
}

// Status returns HTTPResponse.Status
func (r RotateClusterTokenAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RotateClusterTokenAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCustomDomainsAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCustomDomainsResponse
}

// Status returns HTTPResponse.Status
func (r ListCustomDomainsAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCustomDomainsAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCustomDomainAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateCustomDomainResponse
}

// Status returns HTTPResponse.Status
func (r AddCustomDomainAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCustomDomainAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomDomainAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCustomDomainAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomDomainAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetryCustomDomainAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RetryCustomDomainAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetryCustomDomainAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationInvitesAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListOrganizationInvitesResponse
}

// Status returns HTTPResponse.Status
func (r ListOrganizationInvitesAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationInvitesAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationInviteAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateOrganizationInviteResponse
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationInviteAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationInviteAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationInviteAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationInviteAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationInviteAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListKeyPairsAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListKeyPairsResponse
}

// Status returns HTTPResponse.Status
func (r ListKeyPairsAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListKeyPairsAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateKeyPairAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateKeyPairResponse
}

// Status returns HTTPResponse.Status
func (r CreateKeyPairAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateKeyPairAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteKeyPairAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteKeyPairAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteKeyPairAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeyPairAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetKeyPairResponse
}

// Status returns HTTPResponse.Status
func (r GetKeyPairAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeyPairAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateKeyPairAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateKeyPairResponse
}

// Status returns HTTPResponse.Status
func (r UpdateKeyPairAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateKeyPairAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LeaveOrganizationAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LeaveOrganizationAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LeaveOrganizationAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListNamespacesAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListNamespacesResponse
}

// Status returns HTTPResponse.Status
func (r ListNamespacesAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListNamespacesAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPoliciesAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListPoliciesResponse
}

// Status returns HTTPResponse.Status
func (r ListPoliciesAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPoliciesAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePolicyAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreatePolicyResponse
}

// Status returns HTTPResponse.Status
func (r CreatePolicyAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePolicyAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePolicyAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePolicyAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePolicyAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPolicyAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPolicyResponse
}

// Status returns HTTPResponse.Status
func (r GetPolicyAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPolicyAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePolicyAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdatePolicyResponse
}

// Status returns HTTPResponse.Status
func (r UpdatePolicyAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePolicyAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRoutesAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListRoutesResponse
}

// Status returns HTTPResponse.Status
func (r ListRoutesAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRoutesAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRouteAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateRouteResponse
}

// Status returns HTTPResponse.Status
func (r CreateRouteAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRouteAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRouteAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRouteAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRouteAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRouteAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetRouteResponse
}

// Status returns HTTPResponse.Status
func (r GetRouteAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRouteAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRouteAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateRouteResponse
}

// Status returns HTTPResponse.Status
func (r UpdateRouteAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRouteAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRouteCertificatesAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListKeyPairsResponse
}

// Status returns HTTPResponse.Status
func (r GetRouteCertificatesAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRouteCertificatesAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsersInOrganizationAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListUsersInOrganizationResponse
}

// Status returns HTTPResponse.Status
func (r ListUsersInOrganizationAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsersInOrganizationAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApiAccessUserAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateApiAccessUserResponse
}

// Status returns HTTPResponse.Status
func (r CreateApiAccessUserAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApiAccessUserAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveUserFromOrganizationAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveUserFromOrganizationAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveUserFromOrganizationAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RenewApiUserRefreshTokenAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenewApiUserRefreshTokenResponse
}

// Status returns HTTPResponse.Status
func (r RenewApiUserRefreshTokenAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RenewApiUserRefreshTokenAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdTokenAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTokenResponse
}

// Status returns HTTPResponse.Status
func (r GetIdTokenAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdTokenAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCurrentUserAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCurrentUserAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCurrentUserAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCurrentUserInfoAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateUserResponse
}

// Status returns HTTPResponse.Status
func (r UpdateCurrentUserInfoAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCurrentUserInfoAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUserInvitationsAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListUserInvitationsResponse
}

// Status returns HTTPResponse.Status
func (r ListUserInvitationsAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUserInvitationsAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcceptInvitationAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AcceptInvitationAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcceptInvitationAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RejectInvitationAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RejectInvitationAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RejectInvitationAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetVersionResponse
}

// Status returns HTTPResponse.Status
func (r GetVersionAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CheckIdentityProviderSettingsWithBodyWithResponse request with arbitrary body returning *CheckIdentityProviderSettingsAPIResponse
func (c *ClientWithResponses) CheckIdentityProviderSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckIdentityProviderSettingsAPIResponse, error) {
	rsp, err := c.CheckIdentityProviderSettingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckIdentityProviderSettingsAPIResponse(rsp)
}

func (c *ClientWithResponses) CheckIdentityProviderSettingsWithResponse(ctx context.Context, body CheckIdentityProviderSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckIdentityProviderSettingsAPIResponse, error) {
	rsp, err := c.CheckIdentityProviderSettings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckIdentityProviderSettingsAPIResponse(rsp)
}

// ListDefaultTemplatesWithResponse request returning *ListDefaultTemplatesAPIResponse
func (c *ClientWithResponses) ListDefaultTemplatesWithResponse(ctx context.Context, recordType PathRecordType, reqEditors ...RequestEditorFn) (*ListDefaultTemplatesAPIResponse, error) {
	rsp, err := c.ListDefaultTemplates(ctx, recordType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDefaultTemplatesAPIResponse(rsp)
}

// GenerateSubdomainNameWithResponse request returning *GenerateSubdomainNameAPIResponse
func (c *ClientWithResponses) GenerateSubdomainNameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GenerateSubdomainNameAPIResponse, error) {
	rsp, err := c.GenerateSubdomainName(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateSubdomainNameAPIResponse(rsp)
}

// AuthorizeNotificationsWithBodyWithResponse request with arbitrary body returning *AuthorizeNotificationsAPIResponse
func (c *ClientWithResponses) AuthorizeNotificationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthorizeNotificationsAPIResponse, error) {
	rsp, err := c.AuthorizeNotificationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthorizeNotificationsAPIResponse(rsp)
}

func (c *ClientWithResponses) AuthorizeNotificationsWithFormdataBodyWithResponse(ctx context.Context, body AuthorizeNotificationsFormdataRequestBody, reqEditors ...RequestEditorFn) (*AuthorizeNotificationsAPIResponse, error) {
	rsp, err := c.AuthorizeNotificationsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthorizeNotificationsAPIResponse(rsp)
}

// CompleteOnboardingWithResponse request returning *CompleteOnboardingAPIResponse
func (c *ClientWithResponses) CompleteOnboardingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CompleteOnboardingAPIResponse, error) {
	rsp, err := c.CompleteOnboarding(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteOnboardingAPIResponse(rsp)
}

// ConfigureOnboardingWithBodyWithResponse request with arbitrary body returning *ConfigureOnboardingAPIResponse
func (c *ClientWithResponses) ConfigureOnboardingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConfigureOnboardingAPIResponse, error) {
	rsp, err := c.ConfigureOnboardingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigureOnboardingAPIResponse(rsp)
}

func (c *ClientWithResponses) ConfigureOnboardingWithResponse(ctx context.Context, body ConfigureOnboardingJSONRequestBody, reqEditors ...RequestEditorFn) (*ConfigureOnboardingAPIResponse, error) {
	rsp, err := c.ConfigureOnboarding(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigureOnboardingAPIResponse(rsp)
}

// StartOnboardingWithBodyWithResponse request with arbitrary body returning *StartOnboardingAPIResponse
func (c *ClientWithResponses) StartOnboardingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartOnboardingAPIResponse, error) {
	rsp, err := c.StartOnboardingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartOnboardingAPIResponse(rsp)
}

func (c *ClientWithResponses) StartOnboardingWithResponse(ctx context.Context, body StartOnboardingJSONRequestBody, reqEditors ...RequestEditorFn) (*StartOnboardingAPIResponse, error) {
	rsp, err := c.StartOnboarding(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartOnboardingAPIResponse(rsp)
}

// ListOrganizationsWithResponse request returning *ListOrganizationsAPIResponse
func (c *ClientWithResponses) ListOrganizationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListOrganizationsAPIResponse, error) {
	rsp, err := c.ListOrganizations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationsAPIResponse(rsp)
}

// CreateOrganizationWithBodyWithResponse request with arbitrary body returning *CreateOrganizationAPIResponse
func (c *ClientWithResponses) CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationAPIResponse, error) {
	rsp, err := c.CreateOrganizationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationAPIResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationAPIResponse, error) {
	rsp, err := c.CreateOrganization(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationAPIResponse(rsp)
}

// DeleteOrganizationWithResponse request returning *DeleteOrganizationAPIResponse
func (c *ClientWithResponses) DeleteOrganizationWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*DeleteOrganizationAPIResponse, error) {
	rsp, err := c.DeleteOrganization(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationAPIResponse(rsp)
}

// GetOrganizationWithResponse request returning *GetOrganizationAPIResponse
func (c *ClientWithResponses) GetOrganizationWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetOrganizationAPIResponse, error) {
	rsp, err := c.GetOrganization(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationAPIResponse(rsp)
}

// UpdateOrganizationWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationAPIResponse
func (c *ClientWithResponses) UpdateOrganizationWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationAPIResponse, error) {
	rsp, err := c.UpdateOrganizationWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationAPIResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationWithResponse(ctx context.Context, organizationId PathOrganizationId, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationAPIResponse, error) {
	rsp, err := c.UpdateOrganization(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationAPIResponse(rsp)
}

// ListActivityLogsWithResponse request returning *ListActivityLogsAPIResponse
func (c *ClientWithResponses) ListActivityLogsWithResponse(ctx context.Context, organizationId PathOrganizationId, params *ListActivityLogsParams, reqEditors ...RequestEditorFn) (*ListActivityLogsAPIResponse, error) {
	rsp, err := c.ListActivityLogs(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListActivityLogsAPIResponse(rsp)
}

// CompleteCheckoutSessionWithBodyWithResponse request with arbitrary body returning *CompleteCheckoutSessionAPIResponse
func (c *ClientWithResponses) CompleteCheckoutSessionWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteCheckoutSessionAPIResponse, error) {
	rsp, err := c.CompleteCheckoutSessionWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteCheckoutSessionAPIResponse(rsp)
}

func (c *ClientWithResponses) CompleteCheckoutSessionWithResponse(ctx context.Context, organizationId PathOrganizationId, body CompleteCheckoutSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteCheckoutSessionAPIResponse, error) {
	rsp, err := c.CompleteCheckoutSession(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteCheckoutSessionAPIResponse(rsp)
}

// CreateBillingPortalSessionWithBodyWithResponse request with arbitrary body returning *CreateBillingPortalSessionAPIResponse
func (c *ClientWithResponses) CreateBillingPortalSessionWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBillingPortalSessionAPIResponse, error) {
	rsp, err := c.CreateBillingPortalSessionWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBillingPortalSessionAPIResponse(rsp)
}

func (c *ClientWithResponses) CreateBillingPortalSessionWithResponse(ctx context.Context, organizationId PathOrganizationId, body CreateBillingPortalSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBillingPortalSessionAPIResponse, error) {
	rsp, err := c.CreateBillingPortalSession(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBillingPortalSessionAPIResponse(rsp)
}

// CreateCheckoutSessionWithBodyWithResponse request with arbitrary body returning *CreateCheckoutSessionAPIResponse
func (c *ClientWithResponses) CreateCheckoutSessionWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCheckoutSessionAPIResponse, error) {
	rsp, err := c.CreateCheckoutSessionWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCheckoutSessionAPIResponse(rsp)
}

func (c *ClientWithResponses) CreateCheckoutSessionWithResponse(ctx context.Context, organizationId PathOrganizationId, body CreateCheckoutSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCheckoutSessionAPIResponse, error) {
	rsp, err := c.CreateCheckoutSession(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCheckoutSessionAPIResponse(rsp)
}

// UpdateCustomerInformationWithBodyWithResponse request with arbitrary body returning *UpdateCustomerInformationAPIResponse
func (c *ClientWithResponses) UpdateCustomerInformationWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomerInformationAPIResponse, error) {
	rsp, err := c.UpdateCustomerInformationWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomerInformationAPIResponse(rsp)
}

func (c *ClientWithResponses) UpdateCustomerInformationWithResponse(ctx context.Context, organizationId PathOrganizationId, body UpdateCustomerInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomerInformationAPIResponse, error) {
	rsp, err := c.UpdateCustomerInformation(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomerInformationAPIResponse(rsp)
}

// ListInvoicesWithResponse request returning *ListInvoicesAPIResponse
func (c *ClientWithResponses) ListInvoicesWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*ListInvoicesAPIResponse, error) {
	rsp, err := c.ListInvoices(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInvoicesAPIResponse(rsp)
}

// GetPaymentInformationWithResponse request returning *GetPaymentInformationAPIResponse
func (c *ClientWithResponses) GetPaymentInformationWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetPaymentInformationAPIResponse, error) {
	rsp, err := c.GetPaymentInformation(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentInformationAPIResponse(rsp)
}

// GetSubscriptionInformationWithResponse request returning *GetSubscriptionInformationAPIResponse
func (c *ClientWithResponses) GetSubscriptionInformationWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetSubscriptionInformationAPIResponse, error) {
	rsp, err := c.GetSubscriptionInformation(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSubscriptionInformationAPIResponse(rsp)
}

// GetBillingUsageWithResponse request returning *GetBillingUsageAPIResponse
func (c *ClientWithResponses) GetBillingUsageWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetBillingUsageAPIResponse, error) {
	rsp, err := c.GetBillingUsage(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBillingUsageAPIResponse(rsp)
}

// ListChangesetsWithResponse request returning *ListChangesetsAPIResponse
func (c *ClientWithResponses) ListChangesetsWithResponse(ctx context.Context, organizationId PathOrganizationId, params *ListChangesetsParams, reqEditors ...RequestEditorFn) (*ListChangesetsAPIResponse, error) {
	rsp, err := c.ListChangesets(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListChangesetsAPIResponse(rsp)
}

// CompareChangesetsWithResponse request returning *CompareChangesetsAPIResponse
func (c *ClientWithResponses) CompareChangesetsWithResponse(ctx context.Context, organizationId PathOrganizationId, params *CompareChangesetsParams, reqEditors ...RequestEditorFn) (*CompareChangesetsAPIResponse, error) {
	rsp, err := c.CompareChangesets(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompareChangesetsAPIResponse(rsp)
}

// ApplyChangesetWithResponse request returning *ApplyChangesetAPIResponse
func (c *ClientWithResponses) ApplyChangesetWithResponse(ctx context.Context, organizationId PathOrganizationId, changesetId PathChangesetId, reqEditors ...RequestEditorFn) (*ApplyChangesetAPIResponse, error) {
	rsp, err := c.ApplyChangeset(ctx, organizationId, changesetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplyChangesetAPIResponse(rsp)
}

// ListClustersWithResponse request returning *ListClustersAPIResponse
func (c *ClientWithResponses) ListClustersWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*ListClustersAPIResponse, error) {
	rsp, err := c.ListClusters(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListClustersAPIResponse(rsp)
}

// CreateClusterWithBodyWithResponse request with arbitrary body returning *CreateClusterAPIResponse
func (c *ClientWithResponses) CreateClusterWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClusterAPIResponse, error) {
	rsp, err := c.CreateClusterWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClusterAPIResponse(rsp)
}

func (c *ClientWithResponses) CreateClusterWithResponse(ctx context.Context, organizationId PathOrganizationId, body CreateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClusterAPIResponse, error) {
	rsp, err := c.CreateCluster(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClusterAPIResponse(rsp)
}

// DeleteClusterWithResponse request returning *DeleteClusterAPIResponse
func (c *ClientWithResponses) DeleteClusterWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*DeleteClusterAPIResponse, error) {
	rsp, err := c.DeleteCluster(ctx, organizationId, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClusterAPIResponse(rsp)
}

// GetClusterWithResponse request returning *GetClusterAPIResponse
func (c *ClientWithResponses) GetClusterWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*GetClusterAPIResponse, error) {
	rsp, err := c.GetCluster(ctx, organizationId, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterAPIResponse(rsp)
}

// UpdateClusterWithBodyWithResponse request with arbitrary body returning *UpdateClusterAPIResponse
func (c *ClientWithResponses) UpdateClusterWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateClusterAPIResponse, error) {
	rsp, err := c.UpdateClusterWithBody(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateClusterAPIResponse(rsp)
}

func (c *ClientWithResponses) UpdateClusterWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, body UpdateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateClusterAPIResponse, error) {
	rsp, err := c.UpdateCluster(ctx, organizationId, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateClusterAPIResponse(rsp)
}

// GetDistributionSumWithResponse request returning *GetDistributionSumAPIResponse
func (c *ClientWithResponses) GetDistributionSumWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, metricId PathDistributionMetricId, params *GetDistributionSumParams, reqEditors ...RequestEditorFn) (*GetDistributionSumAPIResponse, error) {
	rsp, err := c.GetDistributionSum(ctx, organizationId, clusterId, metricId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDistributionSumAPIResponse(rsp)
}

// GetDistributionTimeSeriesWithResponse request returning *GetDistributionTimeSeriesAPIResponse
func (c *ClientWithResponses) GetDistributionTimeSeriesWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, metricId PathDistributionMetricId, params *GetDistributionTimeSeriesParams, reqEditors ...RequestEditorFn) (*GetDistributionTimeSeriesAPIResponse, error) {
	rsp, err := c.GetDistributionTimeSeries(ctx, organizationId, clusterId, metricId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDistributionTimeSeriesAPIResponse(rsp)
}

// GetClusterHealthWithResponse request returning *GetClusterHealthAPIResponse
func (c *ClientWithResponses) GetClusterHealthWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*GetClusterHealthAPIResponse, error) {
	rsp, err := c.GetClusterHealth(ctx, organizationId, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterHealthAPIResponse(rsp)
}

// RunHealthChecksWithBodyWithResponse request with arbitrary body returning *RunHealthChecksAPIResponse
func (c *ClientWithResponses) RunHealthChecksWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RunHealthChecksAPIResponse, error) {
	rsp, err := c.RunHealthChecksWithBody(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRunHealthChecksAPIResponse(rsp)
}

func (c *ClientWithResponses) RunHealthChecksWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, body RunHealthChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*RunHealthChecksAPIResponse, error) {
	rsp, err := c.RunHealthChecks(ctx, organizationId, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRunHealthChecksAPIResponse(rsp)
}

// PingClusterWithResponse request returning *PingClusterAPIResponse
func (c *ClientWithResponses) PingClusterWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*PingClusterAPIResponse, error) {
	rsp, err := c.PingCluster(ctx, organizationId, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePingClusterAPIResponse(rsp)
}

// ListClusterReplicasWithResponse request returning *ListClusterReplicasAPIResponse
func (c *ClientWithResponses) ListClusterReplicasWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, params *ListClusterReplicasParams, reqEditors ...RequestEditorFn) (*ListClusterReplicasAPIResponse, error) {
	rsp, err := c.ListClusterReplicas(ctx, organizationId, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListClusterReplicasAPIResponse(rsp)
}

// ListServiceAccountsWithResponse request returning *ListServiceAccountsAPIResponse
func (c *ClientWithResponses) ListServiceAccountsWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*ListServiceAccountsAPIResponse, error) {
	rsp, err := c.ListServiceAccounts(ctx, organizationId, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServiceAccountsAPIResponse(rsp)
}

// CreateServiceAccountWithBodyWithResponse request with arbitrary body returning *CreateServiceAccountAPIResponse
func (c *ClientWithResponses) CreateServiceAccountWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceAccountAPIResponse, error) {
	rsp, err := c.CreateServiceAccountWithBody(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceAccountAPIResponse(rsp)
}

func (c *ClientWithResponses) CreateServiceAccountWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, body CreateServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceAccountAPIResponse, error) {
	rsp, err := c.CreateServiceAccount(ctx, organizationId, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceAccountAPIResponse(rsp)
}

// DeleteServiceAccountWithResponse request returning *DeleteServiceAccountAPIResponse
func (c *ClientWithResponses) DeleteServiceAccountWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, serviceAccountId PathServiceAccountId, reqEditors ...RequestEditorFn) (*DeleteServiceAccountAPIResponse, error) {
	rsp, err := c.DeleteServiceAccount(ctx, organizationId, clusterId, serviceAccountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceAccountAPIResponse(rsp)
}

// GetServiceAccountWithResponse request returning *GetServiceAccountAPIResponse
func (c *ClientWithResponses) GetServiceAccountWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, serviceAccountId PathServiceAccountId, reqEditors ...RequestEditorFn) (*GetServiceAccountAPIResponse, error) {
	rsp, err := c.GetServiceAccount(ctx, organizationId, clusterId, serviceAccountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAccountAPIResponse(rsp)
}

// GetServiceAccountTokenWithResponse request returning *GetServiceAccountTokenAPIResponse
func (c *ClientWithResponses) GetServiceAccountTokenWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, serviceAccountId PathServiceAccountId, reqEditors ...RequestEditorFn) (*GetServiceAccountTokenAPIResponse, error) {
	rsp, err := c.GetServiceAccountToken(ctx, organizationId, clusterId, serviceAccountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAccountTokenAPIResponse(rsp)
}

// GetSettingsWithResponse request returning *GetSettingsAPIResponse
func (c *ClientWithResponses) GetSettingsWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*GetSettingsAPIResponse, error) {
	rsp, err := c.GetSettings(ctx, organizationId, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsAPIResponse(rsp)
}

// PatchSettingsWithBodyWithResponse request with arbitrary body returning *PatchSettingsAPIResponse
func (c *ClientWithResponses) PatchSettingsWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSettingsAPIResponse, error) {
	rsp, err := c.PatchSettingsWithBody(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSettingsAPIResponse(rsp)
}

func (c *ClientWithResponses) PatchSettingsWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, body PatchSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSettingsAPIResponse, error) {
	rsp, err := c.PatchSettings(ctx, organizationId, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSettingsAPIResponse(rsp)
}

// UpdateSettingsWithBodyWithResponse request with arbitrary body returning *UpdateSettingsAPIResponse
func (c *ClientWithResponses) UpdateSettingsWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSettingsAPIResponse, error) {
	rsp, err := c.UpdateSettingsWithBody(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSettingsAPIResponse(rsp)
}

func (c *ClientWithResponses) UpdateSettingsWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, body UpdateSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSettingsAPIResponse, error) {
	rsp, err := c.UpdateSettings(ctx, organizationId, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSettingsAPIResponse(rsp)
}

// GetTimeSeriesWithResponse request returning *GetTimeSeriesAPIResponse
func (c *ClientWithResponses) GetTimeSeriesWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, metricId PathTimeSeriesMetricId, params *GetTimeSeriesParams, reqEditors ...RequestEditorFn) (*GetTimeSeriesAPIResponse, error) {
	rsp, err := c.GetTimeSeries(ctx, organizationId, clusterId, metricId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimeSeriesAPIResponse(rsp)
}

// GetTimeSeriesSumWithResponse request returning *GetTimeSeriesSumAPIResponse
func (c *ClientWithResponses) GetTimeSeriesSumWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, metricId PathTimeSeriesMetricId, params *GetTimeSeriesSumParams, reqEditors ...RequestEditorFn) (*GetTimeSeriesSumAPIResponse, error) {
	rsp, err := c.GetTimeSeriesSum(ctx, organizationId, clusterId, metricId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimeSeriesSumAPIResponse(rsp)
}

// RotateClusterTokenWithResponse request returning *RotateClusterTokenAPIResponse
func (c *ClientWithResponses) RotateClusterTokenWithResponse(ctx context.Context, organizationId PathOrganizationId, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*RotateClusterTokenAPIResponse, error) {
	rsp, err := c.RotateClusterToken(ctx, organizationId, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRotateClusterTokenAPIResponse(rsp)
}

// ListCustomDomainsWithResponse request returning *ListCustomDomainsAPIResponse
func (c *ClientWithResponses) ListCustomDomainsWithResponse(ctx context.Context, organizationId PathOrganizationId, params *ListCustomDomainsParams, reqEditors ...RequestEditorFn) (*ListCustomDomainsAPIResponse, error) {
	rsp, err := c.ListCustomDomains(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCustomDomainsAPIResponse(rsp)
}

// AddCustomDomainWithBodyWithResponse request with arbitrary body returning *AddCustomDomainAPIResponse
func (c *ClientWithResponses) AddCustomDomainWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCustomDomainAPIResponse, error) {
	rsp, err := c.AddCustomDomainWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCustomDomainAPIResponse(rsp)
}

func (c *ClientWithResponses) AddCustomDomainWithResponse(ctx context.Context, organizationId PathOrganizationId, body AddCustomDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCustomDomainAPIResponse, error) {
	rsp, err := c.AddCustomDomain(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCustomDomainAPIResponse(rsp)
}

// DeleteCustomDomainWithResponse request returning *DeleteCustomDomainAPIResponse
func (c *ClientWithResponses) DeleteCustomDomainWithResponse(ctx context.Context, organizationId PathOrganizationId, customDomainId PathCustomDomainId, reqEditors ...RequestEditorFn) (*DeleteCustomDomainAPIResponse, error) {
	rsp, err := c.DeleteCustomDomain(ctx, organizationId, customDomainId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomDomainAPIResponse(rsp)
}

// RetryCustomDomainWithResponse request returning *RetryCustomDomainAPIResponse
func (c *ClientWithResponses) RetryCustomDomainWithResponse(ctx context.Context, organizationId PathOrganizationId, customDomainId PathCustomDomainId, reqEditors ...RequestEditorFn) (*RetryCustomDomainAPIResponse, error) {
	rsp, err := c.RetryCustomDomain(ctx, organizationId, customDomainId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetryCustomDomainAPIResponse(rsp)
}

// ListOrganizationInvitesWithResponse request returning *ListOrganizationInvitesAPIResponse
func (c *ClientWithResponses) ListOrganizationInvitesWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*ListOrganizationInvitesAPIResponse, error) {
	rsp, err := c.ListOrganizationInvites(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationInvitesAPIResponse(rsp)
}

// CreateOrganizationInviteWithBodyWithResponse request with arbitrary body returning *CreateOrganizationInviteAPIResponse
func (c *ClientWithResponses) CreateOrganizationInviteWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationInviteAPIResponse, error) {
	rsp, err := c.CreateOrganizationInviteWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationInviteAPIResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationInviteWithResponse(ctx context.Context, organizationId PathOrganizationId, body CreateOrganizationInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationInviteAPIResponse, error) {
	rsp, err := c.CreateOrganizationInvite(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationInviteAPIResponse(rsp)
}

// DeleteOrganizationInviteWithResponse request returning *DeleteOrganizationInviteAPIResponse
func (c *ClientWithResponses) DeleteOrganizationInviteWithResponse(ctx context.Context, organizationId PathOrganizationId, invitationId PathInvitationId, reqEditors ...RequestEditorFn) (*DeleteOrganizationInviteAPIResponse, error) {
	rsp, err := c.DeleteOrganizationInvite(ctx, organizationId, invitationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationInviteAPIResponse(rsp)
}

// ListKeyPairsWithResponse request returning *ListKeyPairsAPIResponse
func (c *ClientWithResponses) ListKeyPairsWithResponse(ctx context.Context, organizationId PathOrganizationId, params *ListKeyPairsParams, reqEditors ...RequestEditorFn) (*ListKeyPairsAPIResponse, error) {
	rsp, err := c.ListKeyPairs(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListKeyPairsAPIResponse(rsp)
}

// CreateKeyPairWithBodyWithResponse request with arbitrary body returning *CreateKeyPairAPIResponse
func (c *ClientWithResponses) CreateKeyPairWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateKeyPairAPIResponse, error) {
	rsp, err := c.CreateKeyPairWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateKeyPairAPIResponse(rsp)
}

func (c *ClientWithResponses) CreateKeyPairWithResponse(ctx context.Context, organizationId PathOrganizationId, body CreateKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateKeyPairAPIResponse, error) {
	rsp, err := c.CreateKeyPair(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateKeyPairAPIResponse(rsp)
}

// DeleteKeyPairWithResponse request returning *DeleteKeyPairAPIResponse
func (c *ClientWithResponses) DeleteKeyPairWithResponse(ctx context.Context, organizationId PathOrganizationId, keyPairId PathKeyPairId, reqEditors ...RequestEditorFn) (*DeleteKeyPairAPIResponse, error) {
	rsp, err := c.DeleteKeyPair(ctx, organizationId, keyPairId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteKeyPairAPIResponse(rsp)
}

// GetKeyPairWithResponse request returning *GetKeyPairAPIResponse
func (c *ClientWithResponses) GetKeyPairWithResponse(ctx context.Context, organizationId PathOrganizationId, keyPairId PathKeyPairId, reqEditors ...RequestEditorFn) (*GetKeyPairAPIResponse, error) {
	rsp, err := c.GetKeyPair(ctx, organizationId, keyPairId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeyPairAPIResponse(rsp)
}

// UpdateKeyPairWithBodyWithResponse request with arbitrary body returning *UpdateKeyPairAPIResponse
func (c *ClientWithResponses) UpdateKeyPairWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, keyPairId PathKeyPairId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateKeyPairAPIResponse, error) {
	rsp, err := c.UpdateKeyPairWithBody(ctx, organizationId, keyPairId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateKeyPairAPIResponse(rsp)
}

func (c *ClientWithResponses) UpdateKeyPairWithResponse(ctx context.Context, organizationId PathOrganizationId, keyPairId PathKeyPairId, body UpdateKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateKeyPairAPIResponse, error) {
	rsp, err := c.UpdateKeyPair(ctx, organizationId, keyPairId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateKeyPairAPIResponse(rsp)
}

// LeaveOrganizationWithResponse request returning *LeaveOrganizationAPIResponse
func (c *ClientWithResponses) LeaveOrganizationWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*LeaveOrganizationAPIResponse, error) {
	rsp, err := c.LeaveOrganization(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLeaveOrganizationAPIResponse(rsp)
}

// ListNamespacesWithResponse request returning *ListNamespacesAPIResponse
func (c *ClientWithResponses) ListNamespacesWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*ListNamespacesAPIResponse, error) {
	rsp, err := c.ListNamespaces(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListNamespacesAPIResponse(rsp)
}

// ListPoliciesWithResponse request returning *ListPoliciesAPIResponse
func (c *ClientWithResponses) ListPoliciesWithResponse(ctx context.Context, organizationId PathOrganizationId, params *ListPoliciesParams, reqEditors ...RequestEditorFn) (*ListPoliciesAPIResponse, error) {
	rsp, err := c.ListPolicies(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPoliciesAPIResponse(rsp)
}

// CreatePolicyWithBodyWithResponse request with arbitrary body returning *CreatePolicyAPIResponse
func (c *ClientWithResponses) CreatePolicyWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePolicyAPIResponse, error) {
	rsp, err := c.CreatePolicyWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePolicyAPIResponse(rsp)
}

func (c *ClientWithResponses) CreatePolicyWithResponse(ctx context.Context, organizationId PathOrganizationId, body CreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePolicyAPIResponse, error) {
	rsp, err := c.CreatePolicy(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePolicyAPIResponse(rsp)
}

// DeletePolicyWithResponse request returning *DeletePolicyAPIResponse
func (c *ClientWithResponses) DeletePolicyWithResponse(ctx context.Context, organizationId PathOrganizationId, policyId PathPolicyId, reqEditors ...RequestEditorFn) (*DeletePolicyAPIResponse, error) {
	rsp, err := c.DeletePolicy(ctx, organizationId, policyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePolicyAPIResponse(rsp)
}

// GetPolicyWithResponse request returning *GetPolicyAPIResponse
func (c *ClientWithResponses) GetPolicyWithResponse(ctx context.Context, organizationId PathOrganizationId, policyId PathPolicyId, reqEditors ...RequestEditorFn) (*GetPolicyAPIResponse, error) {
	rsp, err := c.GetPolicy(ctx, organizationId, policyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPolicyAPIResponse(rsp)
}

// UpdatePolicyWithBodyWithResponse request with arbitrary body returning *UpdatePolicyAPIResponse
func (c *ClientWithResponses) UpdatePolicyWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, policyId PathPolicyId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePolicyAPIResponse, error) {
	rsp, err := c.UpdatePolicyWithBody(ctx, organizationId, policyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePolicyAPIResponse(rsp)
}

func (c *ClientWithResponses) UpdatePolicyWithResponse(ctx context.Context, organizationId PathOrganizationId, policyId PathPolicyId, body UpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePolicyAPIResponse, error) {
	rsp, err := c.UpdatePolicy(ctx, organizationId, policyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePolicyAPIResponse(rsp)
}

// ListRoutesWithResponse request returning *ListRoutesAPIResponse
func (c *ClientWithResponses) ListRoutesWithResponse(ctx context.Context, organizationId PathOrganizationId, params *ListRoutesParams, reqEditors ...RequestEditorFn) (*ListRoutesAPIResponse, error) {
	rsp, err := c.ListRoutes(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRoutesAPIResponse(rsp)
}

// CreateRouteWithBodyWithResponse request with arbitrary body returning *CreateRouteAPIResponse
func (c *ClientWithResponses) CreateRouteWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRouteAPIResponse, error) {
	rsp, err := c.CreateRouteWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRouteAPIResponse(rsp)
}

func (c *ClientWithResponses) CreateRouteWithResponse(ctx context.Context, organizationId PathOrganizationId, body CreateRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRouteAPIResponse, error) {
	rsp, err := c.CreateRoute(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRouteAPIResponse(rsp)
}

// DeleteRouteWithResponse request returning *DeleteRouteAPIResponse
func (c *ClientWithResponses) DeleteRouteWithResponse(ctx context.Context, organizationId PathOrganizationId, routeId PathRouteId, reqEditors ...RequestEditorFn) (*DeleteRouteAPIResponse, error) {
	rsp, err := c.DeleteRoute(ctx, organizationId, routeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRouteAPIResponse(rsp)
}

// GetRouteWithResponse request returning *GetRouteAPIResponse
func (c *ClientWithResponses) GetRouteWithResponse(ctx context.Context, organizationId PathOrganizationId, routeId PathRouteId, reqEditors ...RequestEditorFn) (*GetRouteAPIResponse, error) {
	rsp, err := c.GetRoute(ctx, organizationId, routeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRouteAPIResponse(rsp)
}

// UpdateRouteWithBodyWithResponse request with arbitrary body returning *UpdateRouteAPIResponse
func (c *ClientWithResponses) UpdateRouteWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, routeId PathRouteId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRouteAPIResponse, error) {
	rsp, err := c.UpdateRouteWithBody(ctx, organizationId, routeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRouteAPIResponse(rsp)
}

func (c *ClientWithResponses) UpdateRouteWithResponse(ctx context.Context, organizationId PathOrganizationId, routeId PathRouteId, body UpdateRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRouteAPIResponse, error) {
	rsp, err := c.UpdateRoute(ctx, organizationId, routeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRouteAPIResponse(rsp)
}

// GetRouteCertificatesWithResponse request returning *GetRouteCertificatesAPIResponse
func (c *ClientWithResponses) GetRouteCertificatesWithResponse(ctx context.Context, organizationId PathOrganizationId, routeId PathRouteId, reqEditors ...RequestEditorFn) (*GetRouteCertificatesAPIResponse, error) {
	rsp, err := c.GetRouteCertificates(ctx, organizationId, routeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRouteCertificatesAPIResponse(rsp)
}

// ListUsersInOrganizationWithResponse request returning *ListUsersInOrganizationAPIResponse
func (c *ClientWithResponses) ListUsersInOrganizationWithResponse(ctx context.Context, organizationId PathOrganizationId, params *ListUsersInOrganizationParams, reqEditors ...RequestEditorFn) (*ListUsersInOrganizationAPIResponse, error) {
	rsp, err := c.ListUsersInOrganization(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsersInOrganizationAPIResponse(rsp)
}

// CreateApiAccessUserWithBodyWithResponse request with arbitrary body returning *CreateApiAccessUserAPIResponse
func (c *ClientWithResponses) CreateApiAccessUserWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiAccessUserAPIResponse, error) {
	rsp, err := c.CreateApiAccessUserWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiAccessUserAPIResponse(rsp)
}

func (c *ClientWithResponses) CreateApiAccessUserWithResponse(ctx context.Context, organizationId PathOrganizationId, body CreateApiAccessUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApiAccessUserAPIResponse, error) {
	rsp, err := c.CreateApiAccessUser(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiAccessUserAPIResponse(rsp)
}

// RemoveUserFromOrganizationWithResponse request returning *RemoveUserFromOrganizationAPIResponse
func (c *ClientWithResponses) RemoveUserFromOrganizationWithResponse(ctx context.Context, organizationId PathOrganizationId, userId PathUserId, reqEditors ...RequestEditorFn) (*RemoveUserFromOrganizationAPIResponse, error) {
	rsp, err := c.RemoveUserFromOrganization(ctx, organizationId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserFromOrganizationAPIResponse(rsp)
}

// RenewApiUserRefreshTokenWithResponse request returning *RenewApiUserRefreshTokenAPIResponse
func (c *ClientWithResponses) RenewApiUserRefreshTokenWithResponse(ctx context.Context, organizationId PathOrganizationId, userId PathUserId, reqEditors ...RequestEditorFn) (*RenewApiUserRefreshTokenAPIResponse, error) {
	rsp, err := c.RenewApiUserRefreshToken(ctx, organizationId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRenewApiUserRefreshTokenAPIResponse(rsp)
}

// GetIdTokenWithBodyWithResponse request with arbitrary body returning *GetIdTokenAPIResponse
func (c *ClientWithResponses) GetIdTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIdTokenAPIResponse, error) {
	rsp, err := c.GetIdTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdTokenAPIResponse(rsp)
}

func (c *ClientWithResponses) GetIdTokenWithResponse(ctx context.Context, body GetIdTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIdTokenAPIResponse, error) {
	rsp, err := c.GetIdToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdTokenAPIResponse(rsp)
}

// DeleteCurrentUserWithResponse request returning *DeleteCurrentUserAPIResponse
func (c *ClientWithResponses) DeleteCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteCurrentUserAPIResponse, error) {
	rsp, err := c.DeleteCurrentUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCurrentUserAPIResponse(rsp)
}

// UpdateCurrentUserInfoWithResponse request returning *UpdateCurrentUserInfoAPIResponse
func (c *ClientWithResponses) UpdateCurrentUserInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UpdateCurrentUserInfoAPIResponse, error) {
	rsp, err := c.UpdateCurrentUserInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCurrentUserInfoAPIResponse(rsp)
}

// ListUserInvitationsWithResponse request returning *ListUserInvitationsAPIResponse
func (c *ClientWithResponses) ListUserInvitationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListUserInvitationsAPIResponse, error) {
	rsp, err := c.ListUserInvitations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUserInvitationsAPIResponse(rsp)
}

// AcceptInvitationWithResponse request returning *AcceptInvitationAPIResponse
func (c *ClientWithResponses) AcceptInvitationWithResponse(ctx context.Context, invitationId PathInvitationId, reqEditors ...RequestEditorFn) (*AcceptInvitationAPIResponse, error) {
	rsp, err := c.AcceptInvitation(ctx, invitationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptInvitationAPIResponse(rsp)
}

// RejectInvitationWithResponse request returning *RejectInvitationAPIResponse
func (c *ClientWithResponses) RejectInvitationWithResponse(ctx context.Context, invitationId PathInvitationId, reqEditors ...RequestEditorFn) (*RejectInvitationAPIResponse, error) {
	rsp, err := c.RejectInvitation(ctx, invitationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRejectInvitationAPIResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionAPIResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionAPIResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionAPIResponse(rsp)
}

// ParseCheckIdentityProviderSettingsAPIResponse parses an HTTP response from a CheckIdentityProviderSettingsWithResponse call
func ParseCheckIdentityProviderSettingsAPIResponse(rsp *http.Response) (*CheckIdentityProviderSettingsAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckIdentityProviderSettingsAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckIdentityProviderSettingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListDefaultTemplatesAPIResponse parses an HTTP response from a ListDefaultTemplatesWithResponse call
func ParseListDefaultTemplatesAPIResponse(rsp *http.Response) (*ListDefaultTemplatesAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDefaultTemplatesAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListDefaultTemplatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGenerateSubdomainNameAPIResponse parses an HTTP response from a GenerateSubdomainNameWithResponse call
func ParseGenerateSubdomainNameAPIResponse(rsp *http.Response) (*GenerateSubdomainNameAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateSubdomainNameAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenerateSubdomainNameResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthorizeNotificationsAPIResponse parses an HTTP response from a AuthorizeNotificationsWithResponse call
func ParseAuthorizeNotificationsAPIResponse(rsp *http.Response) (*AuthorizeNotificationsAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthorizeNotificationsAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Auth string `json:"auth"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCompleteOnboardingAPIResponse parses an HTTP response from a CompleteOnboardingWithResponse call
func ParseCompleteOnboardingAPIResponse(rsp *http.Response) (*CompleteOnboardingAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteOnboardingAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseConfigureOnboardingAPIResponse parses an HTTP response from a ConfigureOnboardingWithResponse call
func ParseConfigureOnboardingAPIResponse(rsp *http.Response) (*ConfigureOnboardingAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigureOnboardingAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConfigureOnboardingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStartOnboardingAPIResponse parses an HTTP response from a StartOnboardingWithResponse call
func ParseStartOnboardingAPIResponse(rsp *http.Response) (*StartOnboardingAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartOnboardingAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StartOnboardingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListOrganizationsAPIResponse parses an HTTP response from a ListOrganizationsWithResponse call
func ParseListOrganizationsAPIResponse(rsp *http.Response) (*ListOrganizationsAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationsAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListOrganizationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationAPIResponse parses an HTTP response from a CreateOrganizationWithResponse call
func ParseCreateOrganizationAPIResponse(rsp *http.Response) (*CreateOrganizationAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateOrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteOrganizationAPIResponse parses an HTTP response from a DeleteOrganizationWithResponse call
func ParseDeleteOrganizationAPIResponse(rsp *http.Response) (*DeleteOrganizationAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrganizationAPIResponse parses an HTTP response from a GetOrganizationWithResponse call
func ParseGetOrganizationAPIResponse(rsp *http.Response) (*GetOrganizationAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetOrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateOrganizationAPIResponse parses an HTTP response from a UpdateOrganizationWithResponse call
func ParseUpdateOrganizationAPIResponse(rsp *http.Response) (*UpdateOrganizationAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateOrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListActivityLogsAPIResponse parses an HTTP response from a ListActivityLogsWithResponse call
func ParseListActivityLogsAPIResponse(rsp *http.Response) (*ListActivityLogsAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListActivityLogsAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListActivityLogsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCompleteCheckoutSessionAPIResponse parses an HTTP response from a CompleteCheckoutSessionWithResponse call
func ParseCompleteCheckoutSessionAPIResponse(rsp *http.Response) (*CompleteCheckoutSessionAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteCheckoutSessionAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateBillingPortalSessionAPIResponse parses an HTTP response from a CreateBillingPortalSessionWithResponse call
func ParseCreateBillingPortalSessionAPIResponse(rsp *http.Response) (*CreateBillingPortalSessionAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBillingPortalSessionAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateBillingPortalSessionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCheckoutSessionAPIResponse parses an HTTP response from a CreateCheckoutSessionWithResponse call
func ParseCreateCheckoutSessionAPIResponse(rsp *http.Response) (*CreateCheckoutSessionAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCheckoutSessionAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateCheckoutSessionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCustomerInformationAPIResponse parses an HTTP response from a UpdateCustomerInformationWithResponse call
func ParseUpdateCustomerInformationAPIResponse(rsp *http.Response) (*UpdateCustomerInformationAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCustomerInformationAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListInvoicesAPIResponse parses an HTTP response from a ListInvoicesWithResponse call
func ParseListInvoicesAPIResponse(rsp *http.Response) (*ListInvoicesAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInvoicesAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListInvoicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPaymentInformationAPIResponse parses an HTTP response from a GetPaymentInformationWithResponse call
func ParseGetPaymentInformationAPIResponse(rsp *http.Response) (*GetPaymentInformationAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaymentInformationAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPaymentInformationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSubscriptionInformationAPIResponse parses an HTTP response from a GetSubscriptionInformationWithResponse call
func ParseGetSubscriptionInformationAPIResponse(rsp *http.Response) (*GetSubscriptionInformationAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSubscriptionInformationAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSubscriptionInformationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBillingUsageAPIResponse parses an HTTP response from a GetBillingUsageWithResponse call
func ParseGetBillingUsageAPIResponse(rsp *http.Response) (*GetBillingUsageAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBillingUsageAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetBillingUsageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListChangesetsAPIResponse parses an HTTP response from a ListChangesetsWithResponse call
func ParseListChangesetsAPIResponse(rsp *http.Response) (*ListChangesetsAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListChangesetsAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListChangesetsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCompareChangesetsAPIResponse parses an HTTP response from a CompareChangesetsWithResponse call
func ParseCompareChangesetsAPIResponse(rsp *http.Response) (*CompareChangesetsAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompareChangesetsAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompareChangesetsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplyChangesetAPIResponse parses an HTTP response from a ApplyChangesetWithResponse call
func ParseApplyChangesetAPIResponse(rsp *http.Response) (*ApplyChangesetAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplyChangesetAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplyChangesetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListClustersAPIResponse parses an HTTP response from a ListClustersWithResponse call
func ParseListClustersAPIResponse(rsp *http.Response) (*ListClustersAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListClustersAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListClustersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateClusterAPIResponse parses an HTTP response from a CreateClusterWithResponse call
func ParseCreateClusterAPIResponse(rsp *http.Response) (*CreateClusterAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateClusterAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateClusterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteClusterAPIResponse parses an HTTP response from a DeleteClusterWithResponse call
func ParseDeleteClusterAPIResponse(rsp *http.Response) (*DeleteClusterAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClusterAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClusterAPIResponse parses an HTTP response from a GetClusterWithResponse call
func ParseGetClusterAPIResponse(rsp *http.Response) (*GetClusterAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClusterAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetClusterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateClusterAPIResponse parses an HTTP response from a UpdateClusterWithResponse call
func ParseUpdateClusterAPIResponse(rsp *http.Response) (*UpdateClusterAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateClusterAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateClusterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDistributionSumAPIResponse parses an HTTP response from a GetDistributionSumWithResponse call
func ParseGetDistributionSumAPIResponse(rsp *http.Response) (*GetDistributionSumAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDistributionSumAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDistributionMetricSumResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDistributionTimeSeriesAPIResponse parses an HTTP response from a GetDistributionTimeSeriesWithResponse call
func ParseGetDistributionTimeSeriesAPIResponse(rsp *http.Response) (*GetDistributionTimeSeriesAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDistributionTimeSeriesAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDistributionMetricTimeSeriesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClusterHealthAPIResponse parses an HTTP response from a GetClusterHealthWithResponse call
func ParseGetClusterHealthAPIResponse(rsp *http.Response) (*GetClusterHealthAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClusterHealthAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetClusterHealthResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRunHealthChecksAPIResponse parses an HTTP response from a RunHealthChecksWithResponse call
func ParseRunHealthChecksAPIResponse(rsp *http.Response) (*RunHealthChecksAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RunHealthChecksAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePingClusterAPIResponse parses an HTTP response from a PingClusterWithResponse call
func ParsePingClusterAPIResponse(rsp *http.Response) (*PingClusterAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PingClusterAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PingClusterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListClusterReplicasAPIResponse parses an HTTP response from a ListClusterReplicasWithResponse call
func ParseListClusterReplicasAPIResponse(rsp *http.Response) (*ListClusterReplicasAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListClusterReplicasAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListClusterReplicasResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListServiceAccountsAPIResponse parses an HTTP response from a ListServiceAccountsWithResponse call
func ParseListServiceAccountsAPIResponse(rsp *http.Response) (*ListServiceAccountsAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListServiceAccountsAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListServiceAccountsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateServiceAccountAPIResponse parses an HTTP response from a CreateServiceAccountWithResponse call
func ParseCreateServiceAccountAPIResponse(rsp *http.Response) (*CreateServiceAccountAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateServiceAccountAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateServiceAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteServiceAccountAPIResponse parses an HTTP response from a DeleteServiceAccountWithResponse call
func ParseDeleteServiceAccountAPIResponse(rsp *http.Response) (*DeleteServiceAccountAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceAccountAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceAccountAPIResponse parses an HTTP response from a GetServiceAccountWithResponse call
func ParseGetServiceAccountAPIResponse(rsp *http.Response) (*GetServiceAccountAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAccountAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetServiceAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceAccountTokenAPIResponse parses an HTTP response from a GetServiceAccountTokenWithResponse call
func ParseGetServiceAccountTokenAPIResponse(rsp *http.Response) (*GetServiceAccountTokenAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAccountTokenAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetServiceAccountTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSettingsAPIResponse parses an HTTP response from a GetSettingsWithResponse call
func ParseGetSettingsAPIResponse(rsp *http.Response) (*GetSettingsAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSettingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchSettingsAPIResponse parses an HTTP response from a PatchSettingsWithResponse call
func ParsePatchSettingsAPIResponse(rsp *http.Response) (*PatchSettingsAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSettingsAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchSettingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSettingsAPIResponse parses an HTTP response from a UpdateSettingsWithResponse call
func ParseUpdateSettingsAPIResponse(rsp *http.Response) (*UpdateSettingsAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSettingsAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateSettingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTimeSeriesAPIResponse parses an HTTP response from a GetTimeSeriesWithResponse call
func ParseGetTimeSeriesAPIResponse(rsp *http.Response) (*GetTimeSeriesAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimeSeriesAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTimeSeriesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTimeSeriesSumAPIResponse parses an HTTP response from a GetTimeSeriesSumWithResponse call
func ParseGetTimeSeriesSumAPIResponse(rsp *http.Response) (*GetTimeSeriesSumAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimeSeriesSumAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTimeSeriesSumResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRotateClusterTokenAPIResponse parses an HTTP response from a RotateClusterTokenWithResponse call
func ParseRotateClusterTokenAPIResponse(rsp *http.Response) (*RotateClusterTokenAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RotateClusterTokenAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetClusterTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListCustomDomainsAPIResponse parses an HTTP response from a ListCustomDomainsWithResponse call
func ParseListCustomDomainsAPIResponse(rsp *http.Response) (*ListCustomDomainsAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCustomDomainsAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCustomDomainsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddCustomDomainAPIResponse parses an HTTP response from a AddCustomDomainWithResponse call
func ParseAddCustomDomainAPIResponse(rsp *http.Response) (*AddCustomDomainAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCustomDomainAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateCustomDomainResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteCustomDomainAPIResponse parses an HTTP response from a DeleteCustomDomainWithResponse call
func ParseDeleteCustomDomainAPIResponse(rsp *http.Response) (*DeleteCustomDomainAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomDomainAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRetryCustomDomainAPIResponse parses an HTTP response from a RetryCustomDomainWithResponse call
func ParseRetryCustomDomainAPIResponse(rsp *http.Response) (*RetryCustomDomainAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetryCustomDomainAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListOrganizationInvitesAPIResponse parses an HTTP response from a ListOrganizationInvitesWithResponse call
func ParseListOrganizationInvitesAPIResponse(rsp *http.Response) (*ListOrganizationInvitesAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationInvitesAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListOrganizationInvitesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationInviteAPIResponse parses an HTTP response from a CreateOrganizationInviteWithResponse call
func ParseCreateOrganizationInviteAPIResponse(rsp *http.Response) (*CreateOrganizationInviteAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationInviteAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateOrganizationInviteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteOrganizationInviteAPIResponse parses an HTTP response from a DeleteOrganizationInviteWithResponse call
func ParseDeleteOrganizationInviteAPIResponse(rsp *http.Response) (*DeleteOrganizationInviteAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationInviteAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListKeyPairsAPIResponse parses an HTTP response from a ListKeyPairsWithResponse call
func ParseListKeyPairsAPIResponse(rsp *http.Response) (*ListKeyPairsAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListKeyPairsAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListKeyPairsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateKeyPairAPIResponse parses an HTTP response from a CreateKeyPairWithResponse call
func ParseCreateKeyPairAPIResponse(rsp *http.Response) (*CreateKeyPairAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateKeyPairAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateKeyPairResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteKeyPairAPIResponse parses an HTTP response from a DeleteKeyPairWithResponse call
func ParseDeleteKeyPairAPIResponse(rsp *http.Response) (*DeleteKeyPairAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteKeyPairAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetKeyPairAPIResponse parses an HTTP response from a GetKeyPairWithResponse call
func ParseGetKeyPairAPIResponse(rsp *http.Response) (*GetKeyPairAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeyPairAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetKeyPairResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateKeyPairAPIResponse parses an HTTP response from a UpdateKeyPairWithResponse call
func ParseUpdateKeyPairAPIResponse(rsp *http.Response) (*UpdateKeyPairAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateKeyPairAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateKeyPairResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLeaveOrganizationAPIResponse parses an HTTP response from a LeaveOrganizationWithResponse call
func ParseLeaveOrganizationAPIResponse(rsp *http.Response) (*LeaveOrganizationAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LeaveOrganizationAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListNamespacesAPIResponse parses an HTTP response from a ListNamespacesWithResponse call
func ParseListNamespacesAPIResponse(rsp *http.Response) (*ListNamespacesAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListNamespacesAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListNamespacesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListPoliciesAPIResponse parses an HTTP response from a ListPoliciesWithResponse call
func ParseListPoliciesAPIResponse(rsp *http.Response) (*ListPoliciesAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPoliciesAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListPoliciesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePolicyAPIResponse parses an HTTP response from a CreatePolicyWithResponse call
func ParseCreatePolicyAPIResponse(rsp *http.Response) (*CreatePolicyAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePolicyAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreatePolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeletePolicyAPIResponse parses an HTTP response from a DeletePolicyWithResponse call
func ParseDeletePolicyAPIResponse(rsp *http.Response) (*DeletePolicyAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePolicyAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPolicyAPIResponse parses an HTTP response from a GetPolicyWithResponse call
func ParseGetPolicyAPIResponse(rsp *http.Response) (*GetPolicyAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPolicyAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatePolicyAPIResponse parses an HTTP response from a UpdatePolicyWithResponse call
func ParseUpdatePolicyAPIResponse(rsp *http.Response) (*UpdatePolicyAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePolicyAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdatePolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListRoutesAPIResponse parses an HTTP response from a ListRoutesWithResponse call
func ParseListRoutesAPIResponse(rsp *http.Response) (*ListRoutesAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRoutesAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListRoutesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateRouteAPIResponse parses an HTTP response from a CreateRouteWithResponse call
func ParseCreateRouteAPIResponse(rsp *http.Response) (*CreateRouteAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRouteAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateRouteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteRouteAPIResponse parses an HTTP response from a DeleteRouteWithResponse call
func ParseDeleteRouteAPIResponse(rsp *http.Response) (*DeleteRouteAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRouteAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRouteAPIResponse parses an HTTP response from a GetRouteWithResponse call
func ParseGetRouteAPIResponse(rsp *http.Response) (*GetRouteAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRouteAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetRouteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateRouteAPIResponse parses an HTTP response from a UpdateRouteWithResponse call
func ParseUpdateRouteAPIResponse(rsp *http.Response) (*UpdateRouteAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRouteAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateRouteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRouteCertificatesAPIResponse parses an HTTP response from a GetRouteCertificatesWithResponse call
func ParseGetRouteCertificatesAPIResponse(rsp *http.Response) (*GetRouteCertificatesAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRouteCertificatesAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListKeyPairsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListUsersInOrganizationAPIResponse parses an HTTP response from a ListUsersInOrganizationWithResponse call
func ParseListUsersInOrganizationAPIResponse(rsp *http.Response) (*ListUsersInOrganizationAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsersInOrganizationAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListUsersInOrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateApiAccessUserAPIResponse parses an HTTP response from a CreateApiAccessUserWithResponse call
func ParseCreateApiAccessUserAPIResponse(rsp *http.Response) (*CreateApiAccessUserAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApiAccessUserAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateApiAccessUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRemoveUserFromOrganizationAPIResponse parses an HTTP response from a RemoveUserFromOrganizationWithResponse call
func ParseRemoveUserFromOrganizationAPIResponse(rsp *http.Response) (*RemoveUserFromOrganizationAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveUserFromOrganizationAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRenewApiUserRefreshTokenAPIResponse parses an HTTP response from a RenewApiUserRefreshTokenWithResponse call
func ParseRenewApiUserRefreshTokenAPIResponse(rsp *http.Response) (*RenewApiUserRefreshTokenAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RenewApiUserRefreshTokenAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenewApiUserRefreshTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetIdTokenAPIResponse parses an HTTP response from a GetIdTokenWithResponse call
func ParseGetIdTokenAPIResponse(rsp *http.Response) (*GetIdTokenAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdTokenAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCurrentUserAPIResponse parses an HTTP response from a DeleteCurrentUserWithResponse call
func ParseDeleteCurrentUserAPIResponse(rsp *http.Response) (*DeleteCurrentUserAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCurrentUserAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateCurrentUserInfoAPIResponse parses an HTTP response from a UpdateCurrentUserInfoWithResponse call
func ParseUpdateCurrentUserInfoAPIResponse(rsp *http.Response) (*UpdateCurrentUserInfoAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCurrentUserInfoAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListUserInvitationsAPIResponse parses an HTTP response from a ListUserInvitationsWithResponse call
func ParseListUserInvitationsAPIResponse(rsp *http.Response) (*ListUserInvitationsAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUserInvitationsAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListUserInvitationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAcceptInvitationAPIResponse parses an HTTP response from a AcceptInvitationWithResponse call
func ParseAcceptInvitationAPIResponse(rsp *http.Response) (*AcceptInvitationAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcceptInvitationAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRejectInvitationAPIResponse parses an HTTP response from a RejectInvitationWithResponse call
func ParseRejectInvitationAPIResponse(rsp *http.Response) (*RejectInvitationAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RejectInvitationAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVersionAPIResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionAPIResponse(rsp *http.Response) (*GetVersionAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
